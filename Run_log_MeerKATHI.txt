23-05-2018

The pipeline fails when setting target fcal bpcal and gcal to their targets instead of using auto in the observation_config setting leads to the local variable 'targets' in observation_config_worker.py to be undefined as the targets are never read from from the input yaml file when none of them are auto.

Have file an issue and modified observation_config_worker.py on line 165 by adding
     	  else:
             targets = config['target'].split(',')
             pipeline.target[i] = ','.join(targets)
             pipeline.bpcal[i] = config['bpcal']
             pipeline.fcal[i] = config['fcal']
             pipeline.gcal[i] = config['gcal']

--------------------------------------------------------------------------------
The pipeline crashes in the first selfcal loop  due to the fact that it doesn't find any sources in the MFS image and then the stimela worker does not find the meerkathi-pipeline_1-pybdsm.fits file as it is not produced. This crashes the pipeline. In this case it is correct that pybdsm didn't find any sources as the MFS image was dominated by noise. However, some of the split band images did have sources so it might be something to look at them when no sources are found in the MFS image.

I have now flagged the outer 10 channels of the band pass to ensure that these do not go into the image.

--------------------------------------------------------------------------------

The MFS image is now improved and seems to show a source but the source finder still finds nil sources.
Calibration has a lot  of variation. How to average channels? There is a massive spike in the data in channel 174


------------------------------------------------------------------------
The flagging strategy was running on stokes Q which does not work for the GMRT. Made a new strategy and added the fields paramter to to autoflag_rfi in the yml scheme so that inittially only the calibrators are flagged.

This should get fixed in the new master

---------------

It seems the flags from the first flagging round are not progressed to the second because you need to set or with original in aoflagger scheme.



---------
The apply bandpass field apears to be bpcal,gcal why? Because it applied to the gainfield table. This is ok.
You cannot provide two flux calibrators, they will not be separated.

--------
The delay calibration goes crazy for several antennas that appeared ofline. The target data gets flagged but not the calibrators. Added a timerange to the antenna flagging options. To allow for partial time flagging.

The initial gc1 calibration is unsuccesful. Why?

It seems that the best results are achieved by only applying the bandpass+ gain calibration. Why are delays messing things up? Does applying flux calibration improve things? No it seems that both applying the fluxscale and the delays messes things up.

Default does not apply the gaincal.

It seems that when doing fluxscale the solution are both written out and applied to the gain calibration table. This means that when applying both the calibration is applied twice. The same seems to be true for the delay cal. The default yaml does not apply the gain calibration table.

----------

The target is still crap but phase is good now. Is the target crap because of useing the gcal as bandpass?
yes, do not use.

------

Pipeline crashes on aimfast with the error:

PipelineException: Exception occurred while running pipeline component 'aimfast_1:: Image fidelity assessment for 1': Parameter normality-model is unknown. Run 'stimela cabs -i aimfast' to get help on this cab

The log-aimfast.txt is empty except for:

-----------------------------------
Stimela version     : 0.3.1
Cab name            : peter_cab/aimfast
-------------------------------------
Need to rebuild stimela.

The problem could be that aimfast is not installed. However I thought that stimela was a selfcontained program so it shouldn't be.

The problem is that stimela does not know the parameter 'normality-model' even after upgarding and rebuil;ding stimela

Need stimela_devel which can be installed using

pip install --upgrade -r /home/peter/Pipelines/MeerKATHI/meerkathi/requirements.txt /home/peter/Pipelines/MeerKATHI/meerkathi

Running with aimfast: false results in a different error. In this case the firts round of imaging and extracting are not even done while with aimfast on those seem to work fine.

meerkathi - 2018-06-25 12:34:52,083 ERROR - Traceback (most recent call last):
  File "Installpath/Anaconda2/lib/python2.7/site-packages/meerkathi/__init__.py", line 289, in main
    pipeline.run_workers()
  File "Installpath/Anaconda2/lib/python2.7/site-packages/meerkathi/__init__.py", line 177, in run_workers
    worker.worker(self, recipe, config)
  File "Installpath/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 564, in worker
    calibrate(iter_counter)
  File "Installpath/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 323, in calibrate_meqtrees
    model = config[key].get('model', num)[num-1]
IndexError: list index out of range

So now we need aimfast which isn't installed
Rebuild stimela worked.

Now it crashes on


meerkathi - 2018-06-27 10:37:07,462 ERROR - Traceback (most recent call last):
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/__init__.py", line 289, in main
    pipeline.run_workers()
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/__init__.py", line 177, in run_workers
    worker.worker(self, recipe, config)
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 562, in worker
    config, 'aimfast') else False):
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 480, in quality_check
    fidelity_data = get_aimfast_data()
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 466, in get_aimfast_data
    with open(filename) as f:
IOError: [Errno 2] No such file or directory: 'output/fidelity_results.json'


So the pipeline is hardcoded with 'output' as directory which should be the pipeline.output variable.

And once more it crashes.
meerkathi - 2018-06-27 16:26:47,779 ERROR - Traceback (most recent call last):
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/__init__.py", line 289, in main
    pipeline.run_workers()
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/__init__.py", line 177, in run_workers
    worker.worker(self, recipe, config)
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 562, in worker
    config, 'aimfast') else False):
  File "Installdir/Anaconda2/lib/python2.7/site-packages/meerkathi/workers/self_cal_worker.py", line 483, in quality_check
    pipeline.input, prefix, n - 1)][
KeyError: '//home/msdir/inputdir/meerkathi-pipeline_1-MFS-residual.fits'

These should be fixed now.

-------------------------------------------
We have started from the beginning again and somehow the calibration is completely f'ed up.
Must be a double calibration. Let's try only bandpass and delay.
AAAAArg no doesn't work. Try applying all tables by hand.

Ok so it waorks with

#  applycal :: Apply calibrations solutions(s) to data
vis                 = 'GMRT_Original.ms' #  Name of input visibility file
field               =      '1,2'        #  Select field using field id(s) or
                                        #   field name(s)
spw                 =         ''        #  Select spectral window/channels
intent              =         ''        #  Select observing intent
selectdata          =      False        #  Other data selection parameters
docallib            =      False        #  Use callib or traditional cal apply
                                        #   parameters
     gaintable      = ['GMRT_Out/meerkathi-GMRT_Original-1gc1.B0', 'GMRT_Out/meerkathi-GMRT_Original-1gc1.G0'] #  G
                                        #   ain calibration table(s) to apply on
                                        #   the fly
     gainfield      = ['0', '1']        #  Select a subset of calibrators from
                                        #   gaintable(s)
     interp         = ['linear', 'linear'] #  Interp type in time[,freq], per
                                        #   gaintable. default==linear,linear
     spwmap         =         []        #  Spectral windows combinations to form
                                        #   for gaintables(s)
     calwt          =     [True]        #  Calibrate data weights per gaintable.

parang              =      False        #  Apply parallactic angle correction
applymode           =         ''        #  Calibration mode: ""="calflag","calfl
                                        #   agstrict","trial","flagonly","flagon
                                        #   lystrict", or "calonly"
flagbackup          =       True        #  Automatically back up the state of
                                        #   flags before the run?

This was with no transfer of the fluxscale and a false otfdelay.

What about when we do delay 1  bandpass 0  flux 1
     	   	      linear   linear      linear

We first delete the tables before running again It also works with


#  applycal :: Apply calibrations solutions(s) to data
vis                 = 'GMRT_Original.ms' #  Name of input visibility file
field               =      '1,2'        #  Select field using field id(s) or
                                        #   field name(s)
spw                 =         ''        #  Select spectral window/channels
intent              =         ''        #  Select observing intent
selectdata          =      False        #  Other data selection parameters
docallib            =      False        #  Use callib or traditional cal apply
                                        #   parameters
     gaintable      = ['GMRT_Out/meerkathi-GMRT_Original-1gc1.K0', 'GMRT_Out/meerkathi-GMRT_Original-1gc1.B0', 'GMRT_Out/meerkathi-GMRT_Original-1gc1.F0'] #  G
                                        #   ain calibration table(s) to apply on
                                        #   the fly
     gainfield      = ['1', '0', '1']   #  Select a subset of calibrators from
                                        #   gaintable(s)
     interp         = ['linear', 'linear', 'linear'] #  Interp type in
                                        #   time[,freq], per gaintable.
                                        #   default==linear,linear
     spwmap         =         []        #  Spectral windows combinations to form
                                        #   for gaintables(s)
     calwt          =     [True]        #  Calibrate data weights per gaintable.

parang              =      False        #  Apply parallactic angle correction
applymode           =         ''        #  Calibration mode: ""="calflag","calfl
                                        #   agstrict","trial","flagonly","flagon
                                        #   lystrict", or "calonly"
flagbackup          =       True        #  Automatically back up the state of
                                        #   flags before the run?



Let's try to apply the latter through the pipeleine.

Ok all good now.

----------------------------------------
Self cal is very optimistic.

