type: map
mapping: 
  schema_version:
    type: str
    required: true

  crosscal:
    type: map
    desc: Carry out Cross calibration of the data (delay, bandpass and gain calibration)
    mapping:
      enable: 
        type: bool
        required: true
        desc: Execute this segment.
        example: 'True'
      label_in:
        type: str
        required: true
        desc: Label of measurement set to work on.
        example: 'cal'
      label_cal:
        type: str
        required: false
        desc: Label for output files.
        example: '1gc1'
      rewind_flags:
        desc: Rewind flags to specified version.
        type: map
        mapping:
          enable:
            type: bool
            desc: enable this segement
            example: 'False'
            required: false
          version: 
            type: str
            desc: Flag version to restore. Note that all flag versions saved after this version will be deleted.
            example: 'INSERT_FLAG_VERSION_TO_BE_RESTORED'
            required: false
      overwrite_flag_versions:
        desc: Allow Caracal to overwrite existing flag versions. Not recommended. Only enable this if you know what you are doing.
        type: bool
        example: 'False'
        required: false
      uvrange: 
        type: str
        required: false
        desc: Set the U-V range for data selection, e.g. '>50'.
        example: '>50' 
      casa_version: 
        type: str
        required: false
        desc: Casa version to carry out cross-calibration. '47' means use CASA 4.7, which is recommended, unless you enjoy your data extra flag-gy. Leave empty to use the latest CASA.
        example: '47'
      set_model:
        type: map
        desc: Essentially setjy task from CASA.
        mapping:
          enable:
            type: bool
            desc: Execute the setjy task.
            required: false
            example: 'True'
          caracal_model:
            type: bool
            required: false
            desc: Use built-in sky models in CARACal
            example: 'False'
          no_verify:
            type: bool
            desc: Enables setting standard manually.
            required: false
            example: 'False'
          field:
            type: str 
            desc: Set the field to carry out setjy on. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.   
            required: false
            example: 'fcal'
          threads:
            type: int
            desc: Set the number of threads to use when predicting local sky model using MeqTrees.
            required: false
            example: '8'
      primary_cal:
        type: map
        desc: Calibrating on the bandpass calibrator field
        mapping:
          reuse_existing_gains:
            type: bool
            required: false
            desc: Reuse gain tables if they exist
            example: "False"
          order:
            type: str
            required: false
            desc: "Order in which to solve for gains for this field. E.g, if order is set to 'KGB', the we solve for delays, then the phase and amplitude, and finally the bandpass. The full options are: K-delay calibration; G-amplitude and phase calibration; B-bandpass calibration; A-automatic flagging (existing gains will be applied first)."
            example: KGB
          B_solnorm:
            type: bool
            required: false
            desc: Normalise average solution amplitude to 1.0
            example: "False"
          combine: 
            seq:
              - type: str
            desc: Parameter to combine different data axis for solving. Options are ['','obs', 'scan', 'spw', 'field', 'obs,scan', 'scan,ob']
            example: "'', '', scan"
            required: false
          solint:
            seq:
              - type: str
            desc: Solution interval for delay-correction calibration.
            example: "120s, 120s, inf"
            required: false
          calmode:
            seq:
              - type: str
            desc: Type of solution
            example: "a, ap, ap"
            required: false
          B_fillgaps:
            type: int
            desc: Fill flagged solution channels by interpolation
            example: "70"
            required: false
          plotgains:
            type: bool
            desc: Plot gains
            example: "True"
            required: false
          flag:
            type: map
            desc: Flagging settings used for all "A" (= auto-flagging) steps included in "order" above. These steps include applying the existing gains and flagging the corrected data.
            mapping:
              column:
                type: str
                desc: Data column to flag on
                example: "corrected"
                required: false
                enum: [corrected, residual]
              usewindowstats:
                type: str
                desc: Calculate additional flags using sliding window statistics
                enum: ["none", "sum", "std", "both"]
                example: "std"
                required: false
              combinescans:
                type: bool
                desc: Accumulate data across scans depending on the value of ntime
                example: "False"
                required: false
              flagdimension:
                type: str
                desc: Dimensions along which to calculate fits (freq/time/freqtime/timefreq)
                enum: [freq, time, freqtime, timefreq]
                example: freqtime
                required: false
              timecutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "4.0"
                required: false
              freqcutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "3.0"
                required: false
              correlation:
                type: str
                desc: Correlation
                example: ""
                required: false
      secondary_cal:
        type: map
        desc: Calibrating on the amplitude/phase calibrator field
        mapping:
          reuse_existing_gains:
            type: bool
            required: false
            desc: Reuse gain tables if they exist
            example: "False"
          order:
            type: str
            required: false
            desc: "Order in which to solve for gains for this field. E.g, if order is set to 'KGB', the we solve for delays, then the phase and amplitude, and finally the bandpass. The full options are: K-delay calibration; G-amplitude and phase calibration; B-bandpass calibration; A-automatic flagging (existing gains will be applied first); I-Do a self-callibration"
            example: KG
          solnorm:
            type: bool
            required: false
            desc: Normalise average solution amplitude to 1.0
            example: "False"
          combine: 
            seq:
              - type: str
            desc: Parameter to combine different data axis for solving. Options are ['','obs', 'scan', 'spw', 'field', 'obs,scan', 'scan,ob']
            example: "'', scan"
            required: false
          solint:
            seq:
              - type: str
            desc: Solution interval for delay-correction calibration.
            example: "120s, 120s"
            required: false
          calmode:
            seq:
              - type: str
            desc: Type of solution
            example: "a, ap, ap"
            required: false
          apply:
            type: str
            desc: Gains to apply from calibration of bandpass field
            example: B
            required: false
          plotgains:
            type: bool
            desc: Plot gains
            example: "True"
            required: false
          flag:
            type: map
            desc: Flagging settings used for all "A" (= auto-flagging) steps included in "order" above. These steps include applying the existing gains and flagging the corrected data.
            mapping:
              column:
                type: str
                desc: Data column to flag on
                example: "corrected"
                required: false
                enum: [corrected, residual]
              usewindowstats:
                type: str
                desc: Calculate additional flags using sliding window statistics
                enum: ["none", "sum", "std", "both"]
                example: "std"
                required: false
              combinescans:
                type: bool
                desc: Accumulate data across scans depending on the value of ntime
                example: "False"
                required: false
              flagdimension:
                type: str
                desc: Dimensions along which to calculate fits (freq/time/freqtime/timefreq)
                enum: [freq, time, freqtime, timefreq]
                example: freqtime
                required: false
              timecutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "4.0"
                required: false
              freqcutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "3.0"
                required: false
              correlation:
                type: str
                desc: Correlation
                example: ""
                required: false
          image:
            desc: Image settings for imaging secondary calibrator
            type: map
            mapping:
              npix:
                type: int
                desc: Number of pixels in output image
                required: false
                example: '4096'
              padding:
                type: float
                desc: Padding in WSclean
                required: false
                example: '1.5'
              mgain:
                type: float
                desc: Image CLEANing gain
                required: false
                example: '0.80'
              cell:
                type: float
                desc: Image pixel size (arcsec)
                required: false
                example: '0.5'
              weight:
                type: str
                enum: ["briggs", "uniform", "natural"]
                desc: Image weighting type. If Briggs, set the img robust parameter
                required: false
                example: 'briggs -1.0'
              auto_mask:
                type: float 
                desc: Auto masking threshold
                required: false
                example: '10'
              auto_threshold:
                type: float
                desc: Auto clean threshold
                required: false
                example: '1.5'
              column:
                type: str
                desc: Column to image
                required: false
                example: 'CORRECTED_DATA'
              local_rms:
                type: bool
                desc: switch on local rms measurement for cleaning
                required: false
                example: 'True'
              rms_window:
                type: int
                desc: switch on local rms measurement for cleaning
                required: false
                example: '150'
              niter:
                type: int
                desc: Number of cleaning iterations
                required: false
                example: '200000'
              nchans:
                type: int
                desc: Number of channesls in output image
                required: false
                example: '9'
              fit_spectral_pol:
                type: int
                desc: Number of spectral polynomial terms to fit to each clean component. This is equal to the order of the polynomial plus 1.
                required: false
                example: '2'
      apply_cal:
        type: map
        desc: Apply calibration
        mapping:
          enable:
            type: bool
            desc: Execute this section
            required: false
            example: 'True'
          applyto:
            seq:
              - type: str
            desc: Fields to apply calibration to
            required: false
            example: "bpcal, gcal, target"
          calmode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: false
            example: 'calflag'
      flagging_summary:
        type: map
        desc: Prints out the buther's bill, i.e. data flagging summary at the end of cross calibration process. 
        mapping:
          enable: 
            type: bool
            desc: Execute printing flagging summary.            
            required: false
            example: 'True'
