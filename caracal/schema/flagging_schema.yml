type: map
mapping:
  schema_version:
    type: str
    required: true

  flagging:
    desc: Flagging of the data.
    type: map
    mapping:
      enable: 
        desc: Execute flagging of the data.
        type: bool
        required: True
        example: 'False'
      field:
        desc: Fields that should be flagged. It can either be 'target' or 'calibrators'  (i.e., all calibrators) as defined in the observation_config worker. Note that this selection is ignored -- i.e., all fields in the selected .MS file(s) are flagged -- in the flagging steps flag_time, flag_scan and static_mask. If a user wants to only flag a subset of the calibrators the selection can be further refined using 'calibrator_fields' below. The value of 'field' is also used to compose the name of the .MS file(s) that should be flagged, as exaplined in 'label_in' below.
        type: str
        enum: ['target', 'calibrators']
        required: false
        example: 'calibrators'
      label_in:
        desc: This label is added to the input .MS file(s) name given in the get_data worker to define the name of the .MS file(s) that should be flagged. These are <input>_<label>.ms if 'field' (see above) is set to 'calibrators', or <input>-<target>_<label>.ms if 'field' is set to 'target' (one .MS file for each target in the input .MS). If empty, the original .MS is flagged with the field selection explained in 'field' above.
        type: str
        required: false
        example: ''
      calibrator_fields:
        desc: If 'field' above is set to 'calibrators', users can specify here what subset of calibrators to process. This should be a comma-separated list of 'xcal' ,'bpcal', 'gcal' and/or 'fcal', which were all set by the observation_config worker. Alternatively, 'auto' selects all calibrators.
        type: str
        required: false
        example: 'auto'
      load_flags:
        desc: Restore flags to specified state
        type: map
        mapping:
          enable:
            type: bool
            desc: enable this segement
            example: 'True'
            required: false
          version: 
            type: str
            desc: Flag version name
            example: 'before_flagging_automatic'
            required: false
          merge:
            desc: Merge flags to restored with current flags. (uses 'or')
            type: bool
            example: 'False'
            required: false
      autoflag_autocorr_powerspectra:
        desc: Flags antennas based on drifts in the scan average of the auto correlation spectra per field. This doesn't strictly require any calibration. It is also not field structure dependent, since it is just based on the DC of the field. Compares scan to median power of scans per field per channel. Also compares antenna to median of the array per scan per field per channel. This should catch any antenna with severe temperature problems.
        type: map
        mapping:
          enable:
            desc: Enables flagging of antennas based on drifts in the scan average of the auto correlation spectra per field.
            type: bool
            required: False
            example: 'False'
          scan_to_scan_threshold:
            desc: Threshold for flagging in sigma above the rest of the scans per field per channel.
            type: int
            required: False
            example: '3'
          antenna_to_group_threshold: 
            desc: Threshold for flagging in sigma above array median power spectra per scan per field per channel.
            type: int
            required: false
            example: '5'
          column:
            desc: Data column to flag.
            type: str
            required: False
            example: 'DATA'
          fields:
            desc: Fields to flag. Given as 'auto' or comma-seperated keys (keys in gcal, bpcal, target).
            type: str
            required: False
            example: 'auto'
          calibrator_fields: 
            desc: Calibrator fields. Given as 'auto' or comma-seperated keys (keys in gcal, bpcal).
            type: str
            required: False
            example: 'auto'
          threads: 
            desc: Number of threads to use.
            type: int
            required: False
            example: '8'
      flag_autocorr:
        desc: Flag autocorrelations. Through CASA flagdata task.
        type: map
        mapping:
          enable:
            desc: Enables flagging of autocorrelations.
            type: bool
            required: False
            example: 'False'
      flag_quack:
        desc: Do quack flagging, i.e. flag the begining and/or end chunks of each scan. Again, through FLAGDATA.
        type: map
        mapping:
          enable:
            desc: Enable quack flagging.
            type: bool
            required: False
            example: 'False'
          quackinterval:
            desc: Time interval (in seconds) to flag. 
            type: float
            required: False
            example: '8.'
          quackmode: 
            desc: Quack flagging mode. Either 'beg', which flags scan begining, 'endb', which flags end of the scan, 'end', which flags everything but the first specified seconds of the scan and 'tail' which flags all but the last specified seconds of the scan. 
            type: str
            enum: ["beg", "endb", "end", "tail"]
            required: False
            example: 'beg'
      flag_elevation:
        desc: Flag antennas with pointing elevation outisde the selected range through CASA FLAGDATA.
        type: map
        mapping:
          enable:
            desc: Enable flagging based on pointing elevation.
            type: bool
            required: False
            example: 'False'
          low:
            desc: Lower elevation limit. Antennas pointing at elevation below this value are flagged.
            type: float
            required: False
            example: '0'
          high:
            desc: Upper elevation limit. Antennas pointing at elevation above this value are flagged.
            type: float
            required: False
            example: '90'
      flag_shadow:
        desc: Flag shadowed antennas through the CASA task FLAGDATA.
        type: map
        mapping:
          enable:
            desc: Enables flagging of shadowed antennas.
            type: bool
            required: False
            example: 'False'
          tolerance:
            desc: Amounts of shadow allowed (in metres). Default is 0. A positive number allows antennas to overlap in projection. A negative number forces antennas apart in projection.
            type: float
            required: False
            example: '0.'
          include_full_mk64:
            desc: Consider all MeerKAT-64 antennas in the shadowing calculation even if only a subarray is used. Default is False.
            type: bool
            required: False
            example: 'False'
      flag_spw: 
        desc: Flag spectral windows/channels. Of course, through FLAGDATA.
        type: map
        mapping: 
          enable:
            desc: Enable flagging spectral windows/ channels.
            type: bool
            required: False
            example: 'False'
          channels: 
            desc: Channels to flag. Given as "spectral window index:start channel ~ end channel" e.g. "*:856~880MHz". End channel not inclusive.
            type: str
            required: False
            example: '*:856~880MHz , *:1658~1800MHz, *:1419.8~1421.3MHz'
          ensure_valid_selection:
            desc: Check whether the channel selection returns any data. If it does not FLAGDATA is not executed preventing the pipeline from crashing. This check only works with the following spw formats (multiple, comma-separated selections allowed), "*:firstchan~lastchan"; "firstspw~lastspw:firstchan~lastchan"; "spw:firstchan~lastchan"; "firstchan~lastchan". Channels are assumed to be in frequency (Hz, kHz, MHz, GHz allowed; if no units are given it assumes Hz).
            type: bool
            required: False
            example: 'False'
      
      flag_time: 
        desc: Flag timerange in the data using CASA FLAGDATA task.
        type: map
        mapping: 
          enable: 
            desc: Enabla flagging timeranges.
            type: bool
            required: False
            example: 'False'
          timerange: 
            desc: Timerange to flag. Required in the format 'YYYY/MM/DD/HH:MM:SS~YYYY/MM/DD/HH:MM:SS'.
            type: str
            required: False
            example: ''
          ensure_valid_selection:
            desc: Check whether the timerange is in the ms being considered. This stops the pipeline from crashing when multiple dataset are being processed.
            type: bool
            required: False
            example: 'False'
      flag_antennas:
        desc: Flag bad antennas. Or just the ones you have sworn a vendetta against.
        type: map
        mapping:
          enable: 
            desc: Enables flagging of bad antennas. 
            type: bool
            required: False
            example: 'False'
          antennas:
            desc: Antennas to flag. Follows the CASA Flagdata syntax. 
            type: str
            required: False
            example: '0'
          timerange: 
            desc: Timerange to flag. Required in the format 'YYYY/MM/DD/HH:MM:SS-YYYY/MM/DD/HH:MM:SS'.
            type: str
            required: False
            example: ''
          ensure_valid_selection:
            desc: Check whether the timerange is in the ms being considered. This stops the pipeline from crashing when multiple dataset are being processed.
            type: bool
            required: False
            example: 'False'
      flag_scan:
        desc: Flag bad scans. Uses CASA Flagdata task.
        type: map
        mapping: 
          enable:
            desc: Enables flagging of bad scans. 
            type: bool
            required: False
            example: 'False'
          scans: 
            desc: Scans to flag. CASA flagdata syntax.
            type: str
            required: False
            example: '0'
      static_mask:
        desc: Apply static mask to flag out known RFI, Meerkat specific. 
        type: map
        mapping: 
          enable:
            desc: Enables the application of static mask on the data.
            type: bool
            required: False
            example: 'False'
          mask: 
            desc: The mask to apply. 
            type: str
            required: false
            example: 'labelled_rfimask.pickle.npy'
          uvrange:
            desc: UV range to select (CASA style range, e.g. lower~upper) for flagging. Leave blank for entire array.
            type: str
            required: false
            example: ''

      autoflag_rfi:
        desc: Flag RFI using AOFlagger, Tricolour or CASA flagdata with tfcrop. 
        type: map
        mapping:   
          enable: 
            desc: Enables the  autoflag_rfi section
            type: bool
            required: False
            example: 'False'
          flagger:
            desc: Choose flagger for automatic flagging. Possible choices are 'aoflagger', 'tricolour' and 'tfcrop'.
            type: str
            enum: ["aoflagger", "tricolour", "tfcrop"]
            required: false
            example: "aoflagger"
          column: 
            desc: Specify column to flag
            type: str
            required: False
            example: 'DATA'
          aoflagger:
            type: map
            mapping:
              strategy: 
                desc: The AOFlagger strategy file to use.
                type: str
                required: False
                example: 'firstpass_Q.rfis'
              ensure_valid_strategy:
                desc: Ensure that the selected AOFlagger strategy is compatible with the type of correlations present in the input .MS file(s). E.g., attempts to flag on Stokes V an .MS with XX and YY only will result in an error and exit Caracal. The rules are 1) XY,YX present to flag on Stokes V,U or on XY,YX, 2) XX,YY present to flag on Stokes I,Q or on XX,YY. Disable only if you know what you are doing.
                type: bool
                required: False
                example: 'True'
          tricolour:
            type: map
            mapping:
              window_backend:
                desc: Visibility and flag data is re-ordered from a MS row ordering into time-frequency windows ordered by baseline. 
                type: str
                enum: ["numpy", "zarr-disk"]
                required: false
                example: "numpy"
              mode:
                desc: If set to 'manual' it uses the flagging strategy in 'strategy' below. If set to 'auto' it uses the strategy in 'strategy_narrowband' in case of small bandwidth of the .MS file(s).
                type: str
                required: false
                enum: ['auto', 'manual']
                example: 'auto'
              strategy:
                type: str
                required: False
                example: 'mk_rfi_flagging_calibrator_fields_firstpass.yaml'
              strategy_narrowband:
                type: str
                required: False
                example: 'calibrator_mild_flagging.yaml'
          tfcrop:
            type: map
            mapping:
              usewindowstats:
                type: str 
                desc: Calculate additional flags using sliding window statistics
                enum: ["none", "sum", "std", "both"]
                example: "std"
                required: false
              combinescans:
                type: bool
                desc: Accumulate data across scans depending on the value of ntime
                example: "False"
                required: false
              flagdimension:
                type: str 
                desc: Dimensions along which to calculate fits (freq/time/freqtime/timefreq)
                enum: [freq, time, freqtime, timefreq]
                example: freqtime
                required: false
              timecutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit 
                example: "4.0"
                required: false
              freqcutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit 
                example: "3.0"
                required: false
              correlation:
                type: str 
                desc: Correlation
                example: ""
                required: false
      rfinder:
        desc: A tool to investigate the presence of RFI
        type: map
        mapping:
          enable:
            desc: Enable invsetigation of rfi with rfinder
            type: bool
            required: False
            example: 'False'
          telescope:
            desc: Name of telescope
            type: str
            required: False
            example: 'MeerKAT'
          field:
            desc: Field to get flag stats. Given as a key (key in [gcal, bpcal, target]).
            type: str
            required: False
            example: 'target'
          polarization:
            desc:  Select polarisation e.g. xx, yy, xy, yx, q (also in CAPS)
            type: str
            enum: ['xx', 'XX', 'yy', 'YY', 'xy', 'XY', 'yx', 'YX', 'q', 'Q']
            required: False
            example: 'q'
          spw_enable:
            desc: Enable spw for rebinning
            type: bool
            required: False
            example: 'True'
          spw_width:
            desc: Channel width of rebinned output table (MHz)
            type: int
            required: False
            example: '10'
          time_enable:
            desc: Enable time chunking
            type: bool
            required: False
            example: 'True'
          time_step:
            desc: Time chunks in minutes
            type: int
            required: False
            example: '5'
          movies_in_report:
            desc: Generate movies in a repo
            type: bool
            required: False
            example: 'True'
      flagging_summary:
        desc: Write flagging summary at the end of the pre-calibration flagging. Uses CASA FLAGDATA in "summary" mode.
        type: map
        mapping:
          enable:
            desc: Enables the writing of flagging summary.
            type: bool
            required: false
            example: 'True'

