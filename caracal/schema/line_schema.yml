type: map
mapping:
  line:
    desc: Process visibilities for spectral line work and create line cubes and images.
    type: map
    mapping:
      enable:
        desc: Execute the line worker.
        type: bool
        required: true
        example: 'False'
      label_in:
        desc: Label defining the name of the .MS files to be processed. The .MS file names are composed using the .MS names set by dataid in the getdata worker, followed by the target ID (one file per target), followed by this label. This is the format used by CARACal whenever it writes an .MS file to disk (e.g., in the transform worker).
        type: str
        required: false
        example: 'corr'
      line_name:
        desc: Suffix to be used for the name of the output files (data cubes etc).
        type: str
        required: false
        example: 'HI'
      restfreq:
        desc: Spectral line rest frequency.
        type: str
        required: false
        example: '1.420405752GHz'
      ncpu:
        type: int
        desc: Number of CPUs to use for distributed processing. If set to 0 all available CPUs are used. This parameter is currently only passed on to WSClean for line imaging.
        required: false
        example: '0'
      rewind_flags:
        desc: Rewind flags of the input .MS file(s) to specified version. Note that this is not applied to the .MS file(s) you might be running "transfer_apply_gains" on.
        type: map
        mapping:
          enable:
            desc: Enable the 'rewind_flags' segment.
            type: bool
            required: false
            example: 'True'
          mode:
            desc: If set to 'reset_worker', rewind to the flag version before this worker if it exists, or continue if it does not exist; if set to 'rewind_to_version', rewind to the flag version given by 'version' and 'mstransform_version' below.
            type: str
            enum: ['reset_worker', 'rewind_to_version']
            required: false
            example: 'reset_worker'
          version:
            type: str
            desc: Flag version to restore. This is applied to the .MS file(s) identified by "label" above. Set to "null" to skip this rewinding step. If 'auto' it will rewind to the version prefix_workername_before, where 'prefix' is set in the 'general' worker, and 'workername' is the name of this worker including the suffix '__X' if it is a repeated instance of this worker in the configuration file. Note that all flag versions saved after this version will be deleted.
            example: 'auto'
            required: false
          mstransform_version:
            type: str
            desc: Flag version to restore. This is applied to the .MS file(s) identified by "label" above plus the "_mst" suffix. Set to "null" to skip this rewind step. If 'auto' it will rewind to the version prefix_workername_before, where 'prefix' is set in the 'general' worker, and 'workername' is the name of this worker including the suffix '__X' if it is a repeated instance of this worker in the configuration file. Note that all flag versions saved after this version will be deleted.
            example: 'auto'
            required: false
      overwrite_flagvers:
        desc: Allow CARACal to overwrite existing flag versions. Not recommended. Only enable this if you know what you are doing.
        type: bool
        example: 'False'
        required: false

      subtractmodelcol:
        desc: Replace the CORRECTED_DATA column of the .MS file(s) with the difference CORRECTED_DATA - MODEL_DATA. This is useful for continuum subtraction as it subtracts the continuum clean model written to MODEL_DATA. WARNING! The CORRECTED_DATA column is overwritten. To undo this operation enable the addmodelcol segment in this worker.
        type: map
        mapping:
          enable:
            desc: Enable the 'subtractmodelcol' segment.
            type: bool
            required: false
            example: 'True'
          force:
            desc: Force the model subtraction regardless of the number of previous subtractions.
            type: bool
            required: false
            example: 'False'

      addmodelcol:
        desc: Replace the CORRECTED_DATA column of the .MS file(s) with the sum CORRECTED_DATA + MODEL_DATA. This is useful to undo the operation performed by subtractmodelcol in this worker. WARNING! The CORRECTED_DATA column is overwritten.
        type: map
        mapping:
          enable:
            desc: Enable the 'addmodelcol' segment.
            type: bool
            required: false
            example: 'False'
          force:
            desc: Force the model addition regardless of the number of previous additions.
            type: bool
            required: false
            example: 'False'

      mstransform:
        desc: Perform Doppler-tracking corrections and/or UVLIN continuum subtraction with CASA mstransform. For each input .MS file, this produces an output .MS file whose name is the same as that of the input .MS file plus the suffix "_mst". 
        type: map
        mapping:
          enable:
            desc: Enable the 'mstransform' segment.
            type: bool
            required: false
            example: 'False'
          col:
            desc: Which column of the .MS file(s) to process.
            type: str
            required: false
            example: 'corrected'
          doppler:
            desc: Include the Doppler-tracking correction in the run of CASA mstransform.
            type: map
            mapping:
              enable:
                desc: Enable the 'doppler' (i.e. Doppler correction) segment.
                type: bool
                required: false
                example: 'True'
              telescope:
                desc: Name of the telescope used to take the data. This is used to set the telescope's geographical coordinates when calculating the Doppler correction. Default is 'meerkat'. Current options are askap, atca, gmrt, meerkat, vla, wsrt.
                type: str
                enum: ['askap', 'atca', 'gmrt', 'meerkat','vla', 'wsrt']
                required: true
                example: 'meerkat'
              mode:
                desc: Regridding mode (channel/velocity/frequency/channel_b). IMPORTANT! Currently, only frequency mode is supported. Other modes will throw an error.
                type: str
                enum: ['frequency', ]
                required: false
                example: 'frequency'
              frame:
                desc: Output reference frame. Current options are '', topo, geo, lsrk, lsrd, bary, galacto, lgroup, cmb, and source.
                type: str
                enum : ['', 'topo', 'geo', 'lsrk', 'lsrd', 'bary', 'galacto', 'lgroup', 'cmb', 'source']
                required: false
                example: 'bary'
              veltype:
                desc: Velocity used when regridding if mode = velocity. Current options are radio,and optical.
                type: str
                enum: ['radio', 'optical']
                required: false
                example: 'radio'
              changrid:
                desc: Output channel grid for Doppler correction. Default is 'auto', and the pipeline will calculate the appropriate channel grid. If not 'auto' then it must be in the format 'nchan,chan0,chanw' where nchan is an integer, and chan0 and chanw must include units appropriate for the chosen mode (see parameter 'mode' above).
                type: str
                required: false
                example: 'auto'
          uvlin:
            desc: Include UVLIN-like continuum subtraction in the run of CASA mstransform.
            type: map
            mapping:
              enable:
                desc: Enable the 'UVLIN' segment.
                type: bool
                required: false
                example: 'True'
              fitorder:
                desc: Polynomial order of the continuum fit.
                type: int
                required: false
                example: '1'
              fitspw:
                desc: Selection of line-free channels using CASA syntax (e.g. '0:0~100;150~300'). If set to null, a fit to all unflagged visibilities will be performed.
                type: str
                required: false
                example: ''
              exclude_known_sources:
                desc: Exclude from the UVLIN fit the channels corresponding to known line sources listed in a catalogue. The catalogue file has the name given by the parameter 'known_sources_cat' below and is located in the 'input' directory specified in the 'general' worker. The  resulting channel selection is combined with the one provided by the 'fitspw' parameter above. Some published catalogues are included in the CARACal repository and are ready for use. See 'know_sources_cat' below.
                type: bool
                required: false
                example: 'False'
              known_sources_cat:
                desc: Catalogue of known line sources. The catalogue is in ASCII format, one row per source, with columns (1) source ID, (2) RA (hh:mm:ss.s), (3) Dec (dd:mm:ss.s), (4) Vmin (km/s, optical convention), (5) Vmax (km/s, optical convention), (6) line flux (Jy km/s). The HIPASS catalogue from Meyer et al. (2004), MNRAS, 350, 1195 is included in CARACal with the required format (file name hicat_caracal.txt).
                type: str
                required: false
                example: ''
              known_sources_radius:
                desc: Only line sources within this radius (in deg) from the pointing centre are excluded from the UVLIN fit.
                type: float
                required: false
                example: '1.0'
              known_sources_flux:
                desc: Only line sources brighter than this flux (in Jy km/s) are excluded from the UVLIN fit (no primary beam correction included).
                type: float
                required: false
                example: '0.0'
              known_sources_dv:
                desc: Remove (add) this velocity buffer from (to) the Vmin (Vmax) values in the catalogue to avoid errors caused by anoccounted-for Doppler shifts. This parameter is given in km/s.
                type: float
                required: false
                example: '30.'
          obsinfo:
            desc: Create obsinfo.txt and obsinfo.json per .MS file created by CASA mstransform.
            type: bool
            required: false
            example: 'True'

      flag_mst_errors:
        desc: Run AOFlagger to flag any faulty visibilities produced by CASA mstransform.
        type: map
        mapping:
          enable:
            desc: Enable the 'flag_mst_errors' segment.
            type: bool
            required: false
            example: 'False'
          strategy:
            desc: AOFlagger strategy file.
            type: str
            required: false
            example: 'postmst.rfis'
          readmode:
            desc: AOflagger read mode. If set to 'indirect', AOflagger temporarily writes a reordered .MS file to disc, which results in fast flagging but requires free disc space. If set to 'memory', AOflagger reads the .MS file into memory, which is even faster than 'indirect' but is impossible for large files. If set to 'auto', AOflagger will decide between the 'memory' mode and the 'direct' mode -- the slowest mode -- in which AOFlagger reads baselines by scanning the entire file for the data relevant for the currently required baseline.
            type: str
            enum: ["indirect", "memory", "auto"]
            required: False
            example: 'auto'

      flag_u_zeros:
        desc: flag RFI at u=0
        type: map
        mapping:
          enable: 
            desc: Enable the flag_u_zeros segment
            type: bool
            required: false
            example: 'False'
          use_mstransform:
            desc: Run flagging algorithm on the .MS file(s) produced by the mstransform section of this worker instead of the input .MS file(s).
            type: bool
            required: false
            example: 'True'
          transfer_flags:
            desc: List of datasets to which to transfer the u=0 flags. The list should only include the labels which identify those datasets, following the usual CARACal label convention and the 'use_mstransform' setting of this flag_u_zeros segment. The flags are calculated using the dataset identified by 'label_in' above. Flags can only be transferred to MS files with the same number of channels as the 'label_in' dataset. In case of different number of channels CARACal will crash.
            seq:
              - type: str
            required: false
            example: ''
          method:
            desc: Define flagging method. Either q99 or madThreshold (median+threshold*mad)
            type: str
            enum: ['madThreshold', 'q99']
            required: false
            example: 'madThreshold'
          make_plots:
            desc: Make Plots or not
            type: bool
            required: false
            example: 'True'
          cleanup:
            desc: Remove intermediate ms files, images and FFTs
            type: bool
            required: false
            example: 'True'
          robust:
            desc: robust weighting for the images
            type: float
            required: false
            example: '1.5'
          taper:
            desc: size of gaussian tapering in arcseconds
            type: float
            required: false
            example: '60'
          imsize:
            desc: size of the images in pixel,
            type: int
            required: false
            example: '400'
          cell:
            desc: size of pixel in arcseconds. In the FFT the pixel size in lambda is given by:duv = 1./(imsize*cell*pi/(3600.*180.)), uv cell is in lambda
            type: float
            required: false
            example: '20.'
          chans:
            desc: lowest and highest channel of the spw to consider for imaging
            seq:
              - type: int
            required: false
            example: '0,100'
          thresholds:
            desc: threshold for cutoff of amplitudes in the FFT, default=300
            seq:
              - type: float
            required: false
            example: '300'
          dilateU:
            desc: extend flag selection to N nearby cells along the U axis in both directions
            type: int
            required: false
            example: '0'
          dilateV:
            desc: extend flag selection to N nearby cells along the V axis in both directions
            type: int
            required: false
            example: '0'

      sunblocker:
        desc: Use sunblocker to grid the visibilities and flag UV cells affected by solar RFI. See description of sunblocker on github repository gigjozsa/sunblocker in method phazer of module sunblocker.py.
        type: map
        mapping:
          enable:
            desc: Enable the 'sunblocker' segment.
            type: bool
            required: false
            example: 'False'
          use_mstransform:
            desc: Run sunblocker on the .MS file(s) produced by the mstransform section of this worker instead of the input .MS file(s).
            type: bool
            required: false
            example: 'True'
          imsize:
            desc: Image size (pixels). Use the same as in the make_cube section. This is used to set up the gridding of the visibilities.
            type: int
            required: false
            example: '900'
          cell:
            desc: Pixel size (arcsec). Use the same as in the make_cube section. This is used to set up the gridding of the visibilities.
            type: float
            required: false
            example: '2.'
          thr:
            desc: Flag UV cells whose visibility deviates by more than this threshold from the average visibility on the UV plane. The threshold is in units of the rms dispersion of all visibilities.
            type: float
            required: false
            example: '4.'
          vampirisms:
            desc: Use only daytime data when calculating which UV cells to flag (and flag only daytime data).
            type: bool
            required: false
            example: 'False'
          flagonlyday:
            desc: Apply the flags to data taken during day time only. Note that all data are used when calculating which UV cells to flag if vampirisms is set to false.
            type: bool
            required: false
            example: 'False'
          uvmin:
            desc: Minimum uvdistance to be analysed (in wavelengths, lambda).
            type: float
            required: false
            example: '0.'
          uvmax:
            desc: Maximum uvdistance to be analysed (in wavelengths, lambda).
            type: float
            required: false
            example: '2000'

      predict_noise:
        desc: Print to log-caracal.txt the expected natural noise level of the line cube (Stokes I, single channel) based on Tsys/eff and dish diameter below.
        type: map
        mapping:
          enable:
            desc: Enable the 'predict_noise' segment.
            type: bool
            required: false
            example: 'False'
          tsyseff:
            desc: Value of Tsys/eff in K.
            type: float
            required: false
            example: '20.5'
          diam:
            desc: Dish diameter in m.
            type: float
            required: false
            example: '13.5'

      make_cube:
        desc: Make a line cube using either WSClean + SoFiA (optional for clean masks) or CASA Clean.
        type: map
        mapping:
          enable:
            desc: Enable the 'make_cube' segment.
            type: bool
            required: false
            example: 'false'
          image_with:
            desc: Choose whether to image with WSClean + SoFiA ('wsclean') or with CASA Clean ('casa').
            type: str
            enum: ['wsclean', 'casa']
            required: false
            example: wsclean
          use_mstransform:
            desc: Image the .MS file(s) produced by the mstransform section of this worker instead of the input .MS file(s).
            type: bool
            required: false
            example: 'True'
          stokes:
            desc: Polarizations in output cube (I,Q,U,V,XX,YY,XY,YX,RR,LL,RL,LR and combinations).
            type: str
            required: false
            example: 'I'
          spwid:
            desc: Spectral window to use.
            type: int
            required: false
            example: '0'
          nchans:
            desc: Number of channels of the line cube, where 0 means all channels.
            type: int
            required: false
            example: '0'
          firstchan:
            desc: First channel of the line cube.
            type: int
            required: false
            example: '0'
          binchans:
            desc: Integer binning of channels.
            type: int
            required: false
            example: '1'
          npix:
            desc: Image size in pixels. List of integers (width and height) or a single integer for square images.
            type: seq
            seq:
              - type: int
            required: false
            example: '900 , 900'
          cell:
            desc: Pixel size (arcsec).
            type: float
            required: false
            example: '2'
          padding:
            desc: Images have initial size padding*npix, and are later trimmed to the image size set via the 'npix' parameter.
            type: float
            required: false
            example: '1.2'
          weight:
            desc: Options for the type of weighting to be used are natural, uniform, or briggs. When using Briggs weighting, the additional robust parameter has to be specified.
            type: str
            enum: ['natural', 'uniform', 'briggs']
            required: false
            example: 'briggs'
          robust:
            desc: Robust parameter in case of Briggs weighting.
            type: float
            required: false
            example: '0'
          taper:
            desc: Gaussian taper FWHM in arcsec. Zero means no tapering.
            type: float
            required: false
            example: '0'
          niter:
            desc: Maximum number of clean iterations to perform.
            type: int
            required: false
            example: '1000000'
          gain:
            desc: Fraction of the peak that is cleaned in each minor iteration.
            type: float
            required: false
            example: '0.1'
          wscl_onlypsf:
            desc: If set to true, WSClean will only make the dirty PSF cube, adding the best-fitting Gaussian parameter of each channel to the header. No other cube is made, and the parameter niter is ignored.
            type: bool
            required: false
            example: 'False'
          wscl_mgain:
            desc: Gain value for major iterations in WSClean. I.e., the maximum fraction of the image peak that is cleaned in each major iteration. A value of 1 means that all cleaning happens in the image plane and no major cycle is performed.
            type: float
            required: false
            example: '1.0'
          wscl_sofia_niter:
            desc: Maximum number of WSClean + SoFiA iterations. The initial cleaning is done with WSClean automasking or with a user-provided clean mask. Subsequent iterations use a SoFiA clean mask. A value of 1 means that WSClean is only executed once and SoFiA is not used.
            type: int
            required: false
            example: '2'
          wscl_sofia_converge:
            desc: Stop the WSClean + SoFiA iterations if the cube RMS has dropped by a factor < wscl_sofia_converge when comparing the last two iterations (considering only channels that were cleaned). If set to 0 then the maximum number of iterations is performed regardless of the change in RMS.
            type: float
            required: false
            example: '1.1'
          wscl_removeintermediate:
            desc: If set to true, WSClean + SoFiA intermediate-cubes are deleted from the output directory. If set to false, WSClean + SoFiA intermediate-cubes are retained in the output directory.
            type: bool
            required: false
            example: 'False'
          wscl_user_clean_mask:
            desc: User-provided WSClean clean-mask for the first WSClean + SoFiA iteration (i.e. give the filename of the clean-mask, which is to be located in the output/masking folder).
            type: str
            required: false
            example: ''
          wscl_auto_mask:
            desc: Cleaning threshold used only during the first iteration of WSClean. This is given as the number of sigma_rms to be cleaned down to, where sigma_rms is the noise level estimated by WSClean from the residual image before the start of every major deconvolution iteration. WSClean will clean blindly down to this threshold (wscl_auto_mask), before switching to the auto-threshold set via wscl_auto_threshold.
            type: float
            required: false
            example: '10'
          wscl_auto_thr:
            desc: Cleaning threshold used for subsequent iterations of WSClean. This is given as the number of sigma_rms to be cleaned down to, where sigma_rms is the noise level estimated by WSClean from the residual image before the start of every major deconvolution iteration.
            type: float
            required: false
            example: '0.5'
          wscl_make_cube:
            desc: If set to true, the output of WSClean is a data cube. If set to false, the output is one .FITS image per spectral channel.
            type: bool
            required: false
            example: 'True'
          wscl_noupdatemod:
            desc: If set to true, WSClean will not store the line clean model in MODEL_DATA.
            type: bool
            required: false
            example: 'True'
          wscl_multiscale:
            desc: Switch on WSClean multiscale cleaning.
            type: bool
            required: false
            example: 'False'
          wscl_multiscale_scales:
            desc: Comma-separated integer scales for multiscale cleaning in pixels. If set to an empty string WSClean selects the scales automatically. These include the 0 scale, a scale calculated based on the beam size, and all scales obtained increasing the scale by a factor of 2 until the image size is reached.
            type: str
            required: false
            example: ''
          wscl_multiscale_bias:
            desc: Parameter to set the bias during multiscale cleaning, where a lower bias will give preference to larger angular scales.
            type: float
            required: false
            example: '0.6'
          wscl_nrdeconvsubimg:
            desc: Speed-up deconvolution by splitting each channel into a number of subimages, which are deconvolved in parallel. This parameter sets the number of subimages as follows. If set to 1 no parallel deconvolution is performed. If set to 0 the number of subimages is the same as the number of CPUs used by the line worker (see "ncpu" parameter above). If set to a number > 1 , the number of subimages is greater than or equal to the one requested by the user.
            type: int
            required: false
            example: '1'
          wscl_beam:
            desc: Set Bmaj,Bmin,PA of the beam to be used for restoring the clean components. The units are arcsec for Bmaj and Bmin, degrees for PA. Bmaj and Bmin are FWHM. The default values of [0, 0, 0] mean that WSClean chooses the restoring beam based on a 2d Gaussian fit to the dirty beam.
            type: seq
            seq:
              - type: float
            required: false
            example: '0, 0, 0'
          casa_thr:
            desc: Flux-density level to stop CASA cleaning. It must include units, e.g. '1.0mJy'.
            type: str
            required: false
            example: '10mJy'
          casa_port2fits:
            desc: Port CASA output to fits files.
            type: bool
            required: false
            example: 'False'

      remove_stokes_axis:
        desc: Remove the Stokes axis from the line cube.
        type: map
        mapping:
          enable:
            desc: Enable the 'remove_stokes_axis' segment.
            type: bool
            required: false
            example: 'False'

      pb_cube:
        desc: Make a primary-beam cube.
        type: map
        mapping:
          enable:
            desc: Enable the 'pb_cube' segment.
            type: bool
            required: false
            example: 'False'
          apply_pb: 
            desc: Whether or not to apply the primary-beam correction to the image cube.
            type: bool
            required: false
            example: 'False'
          pb_type:
            desc: Choose between a Gaussian (gauss) primary beam model or the MeerKAT Mauch et al. (2020) model (mauch).
            type: str
            enum: ['gauss', 'mauch']
            required: false
            example: 'gauss'
          dish_size:
            desc: Dish diameter in meters. Only used in the Gaussian primary beam model
            type: float   
            required: false
            example: '13.5'
          cutoff:
            desc: Primary beam pixels below this value are set to NaN.
            type: float
            required: false
            example: '0.1'
      
      freq_to_vel:
        desc: Convert the spectral axis' header keys of the line cube from frequency to velocity in the radio definition, v=c(1-obsfreq/restfreq). No change of spectra reference frame is performed.
        type: map
        mapping:
          enable:
            desc: Enable the 'freq_to_vel' segment.
            type: bool
            required: false
            example: 'False'
          reverse:
            desc: Perform the inverse transformation and change the cube's 3rd axis from radio velocity to frequency.
            type: bool
            required: false
            example: 'False'
      
      imcontsub:
        desc: Use the final output image cube (lastiter true) or all (lastiter false) when using wsclean or a specified set of cubes. Fit a function or filter along the third axis, subtract it from the original, and return the result. Possible is a polynomial fit (fitmode = poly) or a Savitzky-Golay filter. In case of the Savitzky-Golay filter the window length is given by the parameter with the name length. The polynomial order of either polynomial or the filter is specified with the parameter polyorder. A Savitzky-Golay filter with polynomial order 0 is a median filter. Optionally a mask data cube with the same dimensions of the input data cube can be provided.  Voxels for which the mask data cube is not equal to zero are ignored. For the polynomial fit the voxels are simply ignored. In case of the Savitzky Golay filter, an iterative process is started.  All masked voxels are set to zero and a median filter is run along the frequency axis. After that the Savitzky-Golay filter is run sgiters times. If the parameter sgiters is set to 0, only one Savitzky-Golay filter is applied (no initial median filtering, does not work for ). With the parameter fitted the user can optionally supply the name of the output fitted data cube.
        type: map
        mapping:
          enable:
            desc: Enable the 'imcontsub' segment.
            type: bool
            required: false
            example: 'False'
          incubus:
            desc: List of input cubes; will select either image or dirty cubes if empty or not specified
            seq:
              - type: str
            required: false
            example: ''
          lastiter:
            desc: If incubus is empty, select only the last iteration for continuum subtraction (true) or all (false)
            type: bool
            required: false
            example: 'True'
          fitmode:
            desc: Type of fit ('poly' or 'savgol')
            type: str
            enum: ['poly', 'savgol']
            required: false
            example: 'poly'
          length:
            desc: Length of the sliding window in channels (only used for fitmode = savgol must be odd, default is 25)
            type: int
            required: false
            example: '25'
          polyorder:
            desc: Order of the polynomial or of the Savitzky-Golay filter (default is 0)
            type: int
            required: False
            example: '0'
          mask:
            desc: Mask cubes to use. '' means do not use mask cubes or those specified with parameter masculin. 'clean' means use clean masks if available. 'sofia' means use sofia masks if available.
            type: str
            required: False
            example: ''
          masculin:
            desc: List of input mask cubes. Only used if mask = ''. Must be empty or the same number of cubes as the input cubes.
            seq:
              - type: str
            required: false
            example: ''
          sgiters:
            desc: Number of Savitzky-Golay filter iterations (default is 0)
            type: int
            required: False
            example: '0'
          kertyp:
            desc: Kernel type to convolve the polynomial fit with ('gauss', 'tophat')
            type: str
            enum: ['gauss', 'tophat']
            required: false
            example: 'tophat'
          kersiz:
            desc: Kernel size to convolve the polynomial fit with (pixel, 0 means no convolution)
            type: int
            required: false
            example: '0'
          outfit:
            desc: Produce fitted data cubes (True means yes, default is False)
            type: bool
            required: false
            example: 'False'
          outfitcon:
            desc: Produce fitted and convolved data cubes (True means yes, default is False)
            type: bool
            required: false
            example: 'False'
            
      sofia:
        desc: Run SoFiA source-finder on the final HI cubes to produce a detection mask, moment images and catalogues. Note that these settings are not used to make clean masks.
        type: map
        mapping:
          enable:
            desc: Enable the 'sofia' segment.
            type: bool
            required: false
            example: 'False'
          imcontsub:
            desc: Use results of imcontsub instead of image cubes if available
            type: bool
            required: false
            example: 'False'
          flag:
            desc: Use flag regions?
            type: bool
            required: false
            example: 'False'
          flagregion:
            desc: Pixel/channel range(s) to be flagged prior to source finding. Format is [[x1, x2, y1, y2, z1, z2], ...].
            seq:
              - type: int
            required: false
            example: '0, 0, 0, 0, 0, 0'
          rmsMode:
            desc: Method to determine rms ('mad' for using median absolute deviation, 'std' for using standard deviation, 'negative' for using Gaussian fit to negative voxels).
            type: str
            required: false
            example: 'mad'
          thr:
            desc: SoFiA source-finding threshold, in terms of the number of sigma_rms to go down to (i.e. the minimum signal-to-noise ratio).
            type: float
            required: false
            example: '4.0'
          merge:
            desc: Merge pixels detected by any of the SoFiA source-finding algorithms into objects. If enabled, pixels with a separation of less than mergeX pixels in the X direction, mergeY pixels in the Y direction, and mergeZ channels in the Z direction will be merged and identified as a single object in the mask. Objects whose extent is smaller than minSizeX, minSizeY or minSizeZ will be removed from the mask.
            type: bool
            required: false
            example: 'False'
          mergeX:
            desc: Merging radius (in pixels) in the X direction (RA axis).
            type: int
            required: false
            example: '2'
          mergeY:
            desc: Merging radius (in pixels) in the Y direction (Dec axis).
            type: int
            required: false
            example: '2'
          mergeZ:
            desc: Merging radius (in channels) in Z direction (spectral axis).
            type: int
            required: false
            example: '3'
          minSizeX:
            desc: Minimum size (in pixels) in the X direction (RA axis).
            type: int
            required: false
            example: '3'
          minSizeY:
            desc: Minimum size (in pixels) in the Y direction (Dec axis).
            type: int
            required: false
            example: '3'
          minSizeZ:
            desc: Minimum size (in channels) in the Z direction (spectral axis).
            type: int
            required: false
            example: '3'
          cubelets:
            desc: Create a cubelet for each detected emission-line object.
            type: bool
            required: false
            example: 'True'
          mom0:
            desc: Create a moment-0 image of the field.
            type: bool
            required: false
            example: 'True'
          mom1:
            desc: Create a moment-1 image of the field.
            type: bool
            required: false
            example: 'True'

      sharpener:
        desc: Run sharpener to extract and plot the spectra of all continuum sources brighter than a given threshold.
        type: map
        mapping:
          enable:
            desc: Enable the 'sharpener' segment.
            type: bool
            required: false
            example: 'False'
          catalog:
            desc: Type of catalogue to use. Options are PYBDSF and NVSS.
            type: str
            enum: ['NVSS', 'PYBDSF']
            required: false
            example: 'PYBDSF'
          chans_per_plot:
            desc: Number of channels to plot per detailed plot.
            type: int
            required: false
            example: '50'
          thr:
            desc: Threshold to select sources in online catalogue (in units of mJy).
            type: float
            required: false
            example: '20'
          width:
            desc: Field-of-view of output catalogue (in units of degrees).
            type: str
            required: false
            example: '1.0d'
          label:
            desc: Prefix label of plot names and titles.
            type: str
            required: false
            example: ''

      report:
        type: bool
        required: false
        desc: (Re)generate a full HTML report at the end of this worker.
        example: 'False'
      cabs:
        desc: 'Specifies non-default image versions and/or tags for Stimela cabs. Running with scissors: use with extreme caution.'
        required: false
        seq:
          - type: map
            mapping:
              name:
                type: str
                required: true
                example: 'cabname'
              version:
                type: str
                required: false
                example: ''
              tag:
                type: str
                required: false
                example: ''
        example: ''
