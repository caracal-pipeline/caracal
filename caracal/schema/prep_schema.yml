type: map
mapping:
  schema_version:
    type: str
    required: true

  prep:
    desc: Prepare the data for calibration and imaging.
    type: map
    mapping:
      enable:
        desc: Executes the data preparation step.
        type: bool
        required: true
        example: 'False'
      label_in:
        type: str
        required: true
        desc: If this label is an empty string this worker operates on the input .MS file(s) given in the getdata worker. If the label is not an empty string it is added to the input .MS file(s) name given in the getdata worker to define the name of the .MS file(s) to work on. These are <input>_<label>.ms if 'field' (see below) is set to 'calibrators', or <input>-<target>_<label>.ms if 'field' is set to 'target' (one .MS file for each target in the input .MS).
        example: ''
      field:
        desc: In combination with a non-empty 'label_in' (see above), 'field' defines which .MS file(s) to work on. This parameter is ignored if 'label_in' is empty.
        type: str
        enum: ['target', 'calibrators']
        required: False
        example: 'calibrators'
      fixvis:
        desc: Fixes the UVW coordinates through the CASA task fixvis.
        type: map
        mapping:
          enable:
            desc: Enable execution of fixvis.
            type: bool
            required: false
            example: 'False'            
      clear_cal:
        desc: Clears out calibrated data and resets previous predicted model
        type: bool
        required: false
        example: 'False'            
      manage_flags:
        desc: Manage flags
        type: map
        mapping:
          enable: 
            desc: Enable this segment
            type: bool
            required: false
            example: 'True'
          mode: 
            desc: Manage flag mode. With mode = 'legacy', if the 'caracal_legacy' flag version does not yet exist, save the current FLAG column as the 'caracal_legacy flag version; else restore the 'caracal_legacy' flag version and delete all flag versions created after it. With mode = 'restore', restore flags from the flag version specified by 'version' below, and delete all flag versions created after that version.
            type: str
            required: false
            example: 'legacy'
            enum: [legacy, restore]
          version:
            desc: Flag version to restore. If 'auto' it will rewind to the version prefix_workername_before, where 'prefix' is set in the 'general' worker, and 'workername' is the name of this worker including the suffix '__N' if it is a repeated instance of this worker in the configuration file. Note that all flag versions saved after this version will be deleted.
            type: str
            required: false
            example: 'auto'
      spectral_weights: 
        desc: How to initialize spectral weights
        type: map
        mapping: 
          enable: 
            desc: Enable this segment
            type: bool
            required: false
            example: 'False'
          mode:
            desc: "uniform: Set all weights to unity. estimate: Estimate spectral weights from frequency-dependent SEFD/Tsys/Noise values, Also see 'estimate' segment of this section. delete: Delete WEIGHT_SPECTRUM column if it exists."
            type: str
            enum: [uniform, estimate, delete]
            required: false
            example: 'uniform'
          estimate:
            desc: Estimate spectral weights from frequency-dependent SEFD/Tsys/Noise values
            type: map
            mapping:
              stats_data: 
                desc: "File with SEFD/Tsys/Noise data. If data is from MeerKAT telescope, you can specify 'use_package_meerkat_spec' to use package data."
                type: str
                example: 'use_package_meerkat_spec'
                required: false
              weight_columns:
                seq:
                  - type: str
                desc: column names
                required: false
                example: 'WEIGHT, WEIGHT_SPECTRUM'
              noise_columns:
                seq:
                  - type: str
                desc: column names for noise
                required: false
                example: 'SIGMA, SIGMA_SPECTRUM'
              write_to_ms:
                desc: write columns to file
                type: bool
                required: false
                example: 'True'
      report:
        type: bool
        required: false
        desc: (Re)generate a full HTML report at the end of this segment.
        example: 'False'
