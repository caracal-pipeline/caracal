type: map
mapping:
  schema_version:
    type: str
    required: true

  self_cal:
    type: map
    desc: Perform Self calibration on the data.
    mapping:
      enable:
        type: bool
        desc: Execute this segment
        required: true
        example: 'False'
      label:
        type: str
        desc: Label of the .MS files to process.
        required: false
        example: 'corr'
      rewind_flags:
        desc: Rewind flags of the input .MS file(s) to specified version. Note that this is not applied to .MS file(s) you might be running "transfer_apply_gains" on.
        type: map
        mapping:
          enable:
            type: bool
            desc: enable this segement
            example: 'False'
            required: false
          version:
            type: str
            desc: Flag version to restore. This is applied to the .MS file(s) identified by "label" above. Set to "null" to skip this rewinding step. Note that all flag versions saved after this version will be deleted.
            example: 'null'
            required: false
          transfer_apply_gains_version:
            type: str
            desc: Flag version to restore. This is applied to the .MS file(s) identified by "transfer_to_label" in the "transfer_apply_gains" section below. Set to "null" to skip this rewind step. Note that all flag versions saved after this version will be deleted.
            example: 'null'
            required: false
      overwrite_flag_versions:
        desc: Allow Caracal to overwrite existing flag versions. Not recommended. Only enable this if you know what you are doing.
        type: bool
        example: 'False'
        required: false
      calibrate_with:
        type: str
        enum: ["meqtrees", "cubical"]
        desc: Tool to use for calibration
        required: false
        example: 'cubical'
      spwid:
        type: int
        desc: Provide spectral window id
        required: false
        example: '0'
      ncpu:
        type: int
        desc: number of cpu's to use
        required: false
        example: '5'
      minuvw_m:
        type: int
        desc: Exclude baselines shorter than this value (given in metres) from the imaging and selfcalibration loop.
        required: false
        example: '0'
      img_npix:
        type: int
        desc: Number of pixels in output image
        required: false
        example: '1800'
      img_padding:
        type: float
        desc: Padding in WSclean
        required: false
        example: '1.3'
      img_mgain:
        type: float
        desc: Image CLEANing gain
        required: false
        example: '0.90'
      img_cell:
        type: float
        desc: Image pixel size (arcsec)
        required: false
        example: '2.'
      img_weight:
        type: str
        enum: ["briggs", "uniform", "natural"]
        desc: Image weighting type. If Briggs, set the img robust parameter
        required: false
        example: 'briggs'
      img_robust:
        type: float
        desc: Briggs robust value
        required: false
        example: '0.'
      img_taper:
        type: str
        desc: Gaussian taper for imaging (arcsec)
        required: false
        example: '0.'
      img_maxuv_l:
        type: float
        desc: Taper for imaging (lambda)
        required: false
        example: '0.'
      img_transuv_l:
        type: float
        desc: Transition length of tukey taper (taper-tukey in wsclean, in % of maxuv)
        required: false
        example: '10.'
      img_niter:
        type: int
        desc: Number of cleaning iterations
        required: false
        example: '1000000'
      img_nmiter:
        type: int
        desc: Number of major cycles
        required: False
        example: '0'
      img_cleanborder:
        type: float
        desc: Clean border
        required: false
        example: '1.3'
      img_nchans:
        type: int
        desc: Number of channesls in output image
        required: false
        example: '3'
      img_joinchannels:
        type: bool
        desc: Join channels to create MFS image
        required: false
        example: 'True'
      img_fit_spectral_pol:
        type: int
        desc: Number of spectral polynomial terms to fit to each clean component. This is equal to the order of the polynomial plus 1.
        required: false
        example: '2'
      img_pol:
        type: str
        desc: Stokes image to create
        required: false
        example: 'I'
      img_multi_scale:
          type: bool
          desc: switch on multiscale cleaning
          required: false
          example: 'False'
      img_multi_scale_scales:
          seq:
            - type: int
          desc: scales of multiscale [0,10,20,etc, etc] in pixels
          required: false
          example: '10, 20, 30'
      cal_gain_amplitude_clip_low:
        type: float
        desc: Lower gain amplitude clipping
        required: false
        example: '0.5'
      cal_gain_amplitude_clip_high:
        type: float
        desc: Higher gain amplitude clipping
        required: false
        example: '2.'
      cal_max_prior_error:
        type: float
        desc: Flag solution intervals where the prior variance estimate is above this value.
        required: false
        example: '0.1'
      cal_max_post_error:
        type: float
        desc: Flag solution intervals where the posterior variance estimate is above this value.
        required: false
        example: '0.1'
      cal_niter:
        type: int
        desc: Number of self-calibration iterations to perform
        required: false
        example: '2'
      start_at_iter:
        type: int
        desc: Start self-cal iteration loop at this start value, 1-based.
        required: false
        example: '1'
      cal_timeslots_chunk:
        desc: Chunk data up by this number of timeslots. This limits the amount of data processed at once. Smaller chunks allow for a smaller RAM footprint and greater parallelism but sets an upper limit on the time solution intervals that may be employed. 0 means use full time axis but does not cross scan boundaries. -1 Uses largest solution interval
        type: int
        required: false
        example: '-1'
      cal_channel_chunk:
        desc: Chunk data up by this number of channels. This limits the amount of data processed at once. Smaller chunks allow for a smaller RAM footprint and greater parallelism but sets an upper limit on the frequency solution intervals that may be employed. 0 means use full frequency axis but does not cross SPW boundaries. -1 Uses largest solution interval
        type: int
        required: false
        example: '-1'

      aimfast:
        type: map
        desc: Quality assessment parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          tolerance:
            type: float
            desc: Relative change in weighted mean of several indicators from aimfast.
            required: false
            example: '0.02'
          convergence_criteria:
            seq:
              - type: str
            required: false
            desc: The residual statistic to check convergence against. Every criterium listed will be combined into a weighted mean. Options ["DR","SKEW","KURT","STDDev","MEAN"]. Note that when calibrate model_mode = 'vis_only' DR is not an option.
            example: 'DR'
          area_factor:
            type: int
            desc: Peak flux source area multiplying factor i.e tot_area = psf-size*af
            required: false
            example: '6'
          radius:
            type: float
            desc: Radius to cross-match sources in arcsec
            required: false
            example: '0.6'
          normality_model:
            type: str
            enum: ["normaltest", "shapiro"]
            desc: normality test model to use. Note that normaltest is the D'Agostino
            required: false
            example: 'normaltest'
          plot:
            type: bool
            desc: Generate html plots for comparing catalogs and residuals
            required: false
            example: 'True'

      image:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'True'
          column:
            seq:
              - type: str
            desc: Column to image
            required: false
            example: 'DATA, CORRECTED_DATA'
          clean_threshold:
            seq:
              - type: float
            desc: WSclean clean threshold in units of the (local) noise.
            required: false
            example: '0.5, 0.5'
          clean_mask_method:
            seq:
              - type: str
            desc: Method used to create the clean mask. The possible values are 1) "wsclean" to use WSclean's auto-masking (threshold set by clean_mask_threshold below); 2) "sofia" to create a clean mask using SoFiA (threshold set by clean_mask_threshold below, and additional settings in sofia_settings); 3) a prefix string to use an existing .FITS mask located in output/masking and called prefix_target.fits, where the name of the target is set automatically by the pipeline. The latter .FITS mask could be the one created by the masking worker, in which case the prefix set here should correspond to label_out in the masking worker. Note that this third  maskingm ethod can be used on multiple targets in a single pipeline run as long as they all have a corresponding prefix_target.fits mask in output/masking.
            required: false
            example: 'wsclean, wsclean'
          clean_mask_threshold:
            seq:
              - type: float
            desc: Threshold used to create the clean mask when clean_mask_method = wsclean or sofia, in units of the (local) noise.
            required: false
            example: '10.0, 6.0'
          clean_mask_local_rms:
            seq:
              - type: bool
            desc: Use a local rms measurement when creating a clean mask with clean_mask_method = wsclean or sofia. If clean_mask_method = wsclean, this local_rms setting is used also for the clean_threshold above. Otherwise it is only used to define the clean mask, while clean_threshold is in units of the global noise.
            required: false
            example: 'False, False'
          clean_mask_local_rms_window:
            desc: Width of the window used to measure the local rms when creating the clean mask. The window width is in pixels for clean_mask_method = sofia, in PSF for clean_mask_method = wsclean.
            seq:
              - type: int
            required: false
            example: '31, 31'
          sofia_settings:
            desc: SoFiA source finder settings to produce a .FITS clean mask. The mask is located in output/masking.
            type: map
            mapping:
              kernels:
                seq:
                  - type: float
                desc: FWHM of spatial Gaussian kernels in pixels.
                required: false
                example: '0., 3., 6., 9.'
              only_positive_pix:
                type: bool
                desc: Merges only positive pixels of sources in mask
                required: false
                example: 'True'
              flag:
                desc: Use flag regions (yes/no)?
                type: bool
                required: false
                example: 'False'
              flagregion:
                desc: Pixel/channel range(s) to be flagged prior to source finding. Format is [[x1, x2, y1, y2, z1, z2], ...].
                seq:
                  - type: str
                required: false
                example: ''
              inputmask:
                type: str
                desc: input mask over which add Sofia's
                required: false
                example: ''
              fornax_special:
                desc: Activates masking of Fornax A using Sofia
                type: bool
                required: false
                example: 'False'
              fornax_thresh:
                desc: SoFiA source finding threshold. Default is 4.0.
                seq:
                  - type: float
                required: false
                example: '4.0'
              fornax_use_sofia:
                type: bool
                desc: use sofia for mask of Fornax A instead of Fomalont mask
                required: false
                example: 'False'

      extract_sources:
        type: map
        desc: Source finding parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          sourcefinder:
            type: str
            desc: choose your favorite sourcefinder pybdsm, (pybdsf), sofia
            required: false
            example: 'pybdsm'
          local_rms:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          spi:
            type: bool
            desc: Extract source spectral index
            required: false
            example: 'False'           # if not specified no spi will be determined
          thresh_pix:
            seq:
              - type: int
            desc: Source finder pixel threshold
            required: false
            example: '5'
          thresh_isl:
            seq:
              - type: int
            desc: Source finder island threshold
            required: false
            example: '3'

      calibrate:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'True'
          model:
            seq:
              - type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
            example: '1,2'
          output_data:
            seq:
              - type: str
            desc: Data to output after calibration. Options are 'CORR_DATA', 'CORR_RES' or 'CORRECTED_DATA' where CORR_DATA and CORRECTED_DATA are synonyms.
            required: false
            example: 'CORR_DATA'
          gain_matrix_type:
            seq:
              - type: str
            desc: Gain matrix type. GainDiagPhase = phase only calibration, GainDiagAmp = amplitude only, GainDiag = Amplitude + Phase, Gain2x2 = Amplitude + Phase taken non-diagonal terms into account.
            required: false
            example: 'GainDiagPhase, GainDiag'
          model_mode:
            type: str
            desc: pybdsm_vis, pybdsm_only,  vis_only are the possible options
            required: false
            example: 'vis_only'
          shared_memory:
            type: str
            desc: Set the amount of shared memory for cubical. Default '100Gb'
            required: false
            example: '100Gb'
          two_step:
            type: bool
            desc: Trigger a two step calibration process in MeqTrees where the phase only calibration is applied before continuing with amplitude + phase cal. Aimfast is turned on to determine the solution sizes automatically.
            required: false
            example: 'False'
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation
            required: false
            example: 'True'
          Gsols_timeslots:
            seq:
              - type: float
            desc: G-Jones time solution interval. The parameter cal_timeslots_chunk above should a multiple of Gsols_time. 0 means a single solution for the full time of the observations.
            required: false
            example: '1'
          Gsols_channel:
            seq:
              - type: float
            desc: G-Jones frequency solution interval. The parameter cal_channel_chunk above should a multiple of Gsols_channel. 0 means a single solution for the full frequency range in a channel.
            required: false
            example: '0'
          Bjones:
           type: bool
           desc: Enable Bjones
           required: false
           example: 'False'
          Bsols_timeslots:
            seq:
              - type: int
            desc: Bsols for individual calibration steps.
            required: false
            example: '0'
          Bsols_channel:
            seq:
              - type: float
            desc: Bsols for individual calibration steps.
            required: false
            example: '2'
          GAsols_timeslots:
            desc: Time intervals for amplitude calibration in Cubical. 0 indicates average all. -1 defaults to Gsols_timeslots. If different from Gsols_timeslots a second matrix is used and applied.
            seq:
              - type: float
            required: false
            example: '-1'
          GAsols_channel:
            desc: Channel intervals for amplitude calibration in Cubical. 0 indicates average all. -1 defaults to Gsols_channel. If different from Gsols_channels a second matrix is used and applied.
            seq:
              - type: float
            required: false
            example: '-1'
          weight_column:
            desc: Column with weights
            type: str
            required: false
            example: 'WEIGHT'
          madmax_flagging:
            desc: Flags based on maximum of mad
            type: bool
            required: false
            example: 'True'
          madmax_flag_thresh:
            desc: Threshold for madmax flagging
            seq:
              - type: int
            required: false
            example: '0, 10'
          sol_term_iters:
            desc: Number of iterations per Jones term. If set to 'auto', uses hardcoded iteration numbers depending on the jones chain.
            type: str
            required: false
            example: 'auto'
          overwrite_cubical:
            desc: Allow cubical to overwrite the existing gain_tables and other CubiCal output for self calibration that were produced in a previous run of the selfcal worker with the same prefix.
            type: bool
            required: false
            example: 'True'
          dist_max_chunks:
            desc: Maximum number of time/freq data-chunks to load into memory simultaneously. If 0, then as many as possible will be loaded.
            type: int
            required: false
            example: '4'
          ragavi_plot:
            type: map
            desc: Plotting dignostics plots for delay correction calibration.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'False'
              gaintype:
                seq:
                - type: str
                desc: "List of gain solution types"
                required: false
                example: 'G'
              field:
                seq:
                - type: int
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '0'

      restore_model:
        type: map
        desc: Restore modelled to final calibrated residual image
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
            example: '1+2'
          clean_model:
            type: str
            desc: Clean model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
            example: '3'

      flagging_summary:
        type: map
        desc: Output the flagging summary
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'

      transfer_apply_gains:
        type: map
        desc: Interpolate gains over the high frequency resolution data
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          transfer_to_label:
            type: str
            desc: label of cross-calibrated .ms file to which to transfer and apply the selfcal gains
            required: false
            example: 'corr'
          interpolate:
            type: map
            desc: To interpolate the gains or not to interpolate the gains. That is indeed the question.
            mapping:
              enable:
                 type: bool
                 desc: Enable gain interpolation.
                 required: false
                 example: 'True'
              timeslots_int:
                 type: int
                 desc: Solution interval in time (units of timeslots/intergration time) to transfer gains. -1 uses the solution interval from the calibration that is applied.
                 required: false
                 example: '-1'
              channel_int:
                 type: int
                 desc: Solution interval in frequency (units of channels) to transfer gains. -1 uses the solution interval from the calibration that is applied.
                 required: false
                 example: '-1'
              timeslots_chunk:
                 type: int
                 desc: Time chunk in units of timeslots for transferring gains with Cubical. -1 uses the solution interval from the calibration that is applied.
                 required: false
                 example: '-1'
              channel_chunk:
                 type: int
                 desc: Frequency chunk in units of channels for transferring gains with Cubical. '0' means the whole spw. -1 uses the solution interval from the calibration that is applied.
                 required: false
                 example: '-1'

      transfer_model:
        type: map
        desc: Transfer model from last WSclean imaging run to the MODEL_DATA column of another .MS
        mapping:
          enable:
            type: bool
            desc: Execute this segment (default False)
            required: false
            example: 'True'
          transfer_to_label:
            type: str
            desc: label of .ms file to which to transfer the model
            required: false
            example: 'corr'
          model:
            type: str
            desc: Name of the sky model file (currently the only supported format is that of WSclean component lists). When 'auto', the pipeline builds the file name from the input parameters of the selfcal loop. The file is assumed to be in the 'output' directory.
            required: false
            example: 'auto'
          row_chunks:
            type: int
            desc: Number of rows of input .MS that are processed in a single chunk.
            required: false
            example: '0'
          model_chunks:
            type: int
            desc: Number of sky model components that are processed in a single chunk.
            required: false
            example: '0'
          within:
            type: str
            desc: Give JS9 region file. Only sources within those regions will be included.
            required: false
            example: ''
          points_only:
            type: bool
            desc: Select only point-only sources. Default is False.
            required: false
            example: 'False'
          num_sources:
            type: int
            desc: Select only N brightest sources. Default is 0
            required: false
            example: "0"
          num_workers:
            type: int
            desc: Explicitly set the number of worker threads. Default is 0, meaning it uses all threads.
            required: false
            example: '0'
          memory_fraction:
            type: float
            desc: Fraction of system RAM that can be used. Used when setting automatically the chunk size.
            required: false
            example: '0.5'
