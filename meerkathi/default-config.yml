## Default meerkathi pipeline 
schema_version: 0.1.0

general:
  data_path: input/data         
  msdir: msdir                   
  input: input                    
  output: output                   
  prefix: meerkathi-pipeline
  init_pipeline: true


get_data:
  enable: true
  dataid: []                               
  order: 0
  meerkat_query_available:                              
    enable: true
    poll_mode: 'poll'                                   
    query_url: 'http://192.168.1.50:8983/solr/kat_core' 
    required_intents: ['gaincal','bpcal','target']      
    product_type_name: 'MeerKATAR1TelescopeProduct'     
    minimum_observation_duration: 2                    
    product_num_channels: 32768
    when_observed: '[NOW/DAY-7DAYS TO NOW/DAY]'
    description_matches: '.*'
    required_fields: [] 
  download:                       
    enable: true
    download_mode: meerkat         
    data_url: ""    
    reset: false     
  h5toms:             
    enable: true
    channel_range: null 
    tar: true
    full_poll: true
  untar:               
    enable: false
    tar_options: xvf
  combine:
    enable: false
    reset: true
    tar:
      enable: true
      tar_options: cvf
    untar:
      enable: false
      tar_options: xvf


observation_config:
  order: 1
  obsinfo:
    enable: true
    listobs: true
    summary_json: true
  target: auto
  fcal: auto
  bpcal: auto
  gcal: auto
  reference_antenna: auto
  nchans: 0
  firstchanfreq: auto
  lastchanfreq: auto
  chanwidth: auto
  primary_beam:
    enable: false
    freq: "856 1760 64"
    diameter: 6 
    pixels: 256
    coefficients_file: meerkat_coeff_dict.npy


prepare_data:
  enable: true
  order: 2
  fixvis:
    enable: true
  prepms:
    enable: false
    add_imaging_cols: false
  add_spectral_weights:  # Estimate spectral weights from spec. sensitivity 
    enable: true


flagging:
  enable: true
  order: 3
  label: ''
  autoflag_autocorr_powerspectra:
    enable: false
    scan_to_scan_threshold: 3 # sigma above the rest of the scans per field per channel
    antenna_to_group_threshold: 5 # sigma above array median power spectra per scan per field per channel
    column: DATA
    fields: auto # auto or comma-seperated keys (keys in gcal, bpcal, target)
    calibrator_fields: auto #auto or comma-seperated keys (keys in gcal, bpcal, target)
    threads: 8
  flag_autocorr:
    enable: true
  quack_flagging:
    enable: false
    quackinterval: 10
    quackmode: beg
  flag_shadow:
    enable: false
    tolerance: 0
    include_full_mk64: false
  flag_spw:
    enable: true
    channels: "*:856~880MHz,*:1658~1800MHz,*:1419.8~1421.3MHz" #band-rolloffs and Milkyway
    ensure_valid_selection: false
  flag_time:
    enable: false
    timerange: null # "YYYY/MM/DD/HH:MM:SS-YYYY/MM/DD/HH:MM:SS"
  flag_antennas:
    enable: false
    antennas: null
  flag_scan:
    enable: false
    scans: null
  static_mask:
    enable: true
    mask: labelled_rfimask.pickle.npy
  autoflag_rfi:
    enable: true
    strategy: firstpass_HI_strat2.rfis # This has to be in the pipeline input folder
  flagging_summary:
    enable: true


cross_cal:
  enable: true
  order: 4
  otfdelay: false            # Set whether to apply the delay calibration on the fly when solving for other calibration terms
  uvrange: ">50"
  label: 1gc1
  set_model:
    enable: true
    no_verify: false
    field: fcal # This means use the flux calibrator field. You can also specify the field name or ID
  delay_cal:
    enable: true
    combine: ""
    solint: "60s" # Useful diagnostic to keep track of system delays with time
    field: bpcal,gcal # can use both the bandpass and gain calibrator to keep track of delays
    plot: true
    flag:
      enable: true
      mode: clip
      clipminmax: [-60,60]
  bp_cal:
    enable: true
    combine: ""
    field: bpcal
    minnrbl: 4
    minsnr: 3
    solnorm: true
    solint: ""
    plot: true
    remove_ph_time_var: false
  gain_cal_flux:
    enable: true
    combine: ""
    field: fcal
    minnrbl: 4
    minsnr: 3
    plot: false
  gain_cal_gain:
    enable: true
    combine: ""
    field: gcal
    minnrbl: 4
    minsnr: 3
    plot: true
  transfer_fluxscale:
    enable: true
    reference: fcal 
    transfer: gcal
    plot: true
  apply_delay_cal:
    enable: true
    field: bpcal
    applyto: bpcal,gcal,target
    applymode: calflag
  apply_bp_cal:
    enable: true
    applyto: bpcal,gcal,target
    field: bpcal
    applymode: calflag
  apply_gain_cal_gain:
    enable: false
    field: gcal
    applyto: bpcal,gcal,target
    applymode: calflag
  apply_transfer_fluxscale:
    enable: true
    field: gcal
    applyto: bpcal,gcal,target
    applymode: calflag
  autoflag_closure_error:
    enable: false
    scan_to_scan_threshold: 3 # spread sigma above the rest of the scans per field per channel
    baseline_to_group_threshold: 3 # sigma above array median phase spread per scan per field per channel
    column: CORRECTED_DATA
    fields: auto # auto or comma-seperated keys (keys in gcal, bpcal, target)
    calibrator_fields: auto #auto or comma-seperated keys (keys in gcal, bpcal, target)
    threads: 8
  flagging_summary:
    enable: true


inspect_data:
  enable: true
  order: 5
  label: 1gc1
  real_imag:
    enable: true
    fields: gcal,bpcal
    column: corrected
    avgtime: '90'
    avgchannel: '32'
  amp_phase:
    enable: true
    fields: gcal,bpcal
    column: corrected
    avgtime: '90'
    avgchannel: '32'
  amp_uvwave:
    enable: true
    fields: gcal,bpcal
    column: corrected
    avgtime: '90'
    avgchannel: '32'
  amp_ant:
    enable: true
    fields: gcal,bpcal
    column: corrected
    avgtime: '90'
    avgchannel: '32'
  phase_uvwave:
    enable: true
    fields: gcal,bpcal
    column: corrected
    avgtime: '90'
    avgchannel: '32'
  amp_scan:
    enable: true
    fields: gcal,bpcal,target
    column: corrected
    avgtime: '90'
    avgchannel: '32'

split_target:
  enable: true
  order: 9
  label: corr
  split_target:
    enable: true
    time_average: ''
    freq_average: 1
  obsinfo: 
    enable: true
    listobs: false
    summary_json: true
  prepms:
    enable: false

mask_from_catalog:
  enable: no
  order: 10
  centre_coord: ['03:18:0.000', '-37:27:0.000'] #centre of F.o.V.
  catalog: 'SUMSS'
  catalog_mask: 'name_of_outputfile'
  fornaxa_finalmask: 'name_of_FOrnaxA_mask'
  final_mask: 'name_of_output_mask' #masks are stored in output/masking
  query_SUMSS:
    enable: yes
    width_image: '4d'
  build_beam:
    enable: yes
    img_size: 3500      #must be the same as  im_npix in selfcal worker
    cell_size: 2.6         #this will change and we will use the self_cal_3GC keywords
    frequency: 1.37031054688e9
    copyhead : False
    headname : 'name_of_file' #typically a continuum image in /output/
  make_mosaic:
    enable: yes
  casa_regrid:
    enable: yes
  pb_correction:
    enable:  yes
  make_mask:
    enable: yes
    cutoff: 1.e-3
  fornaxa_mask:
    enable: no
    fornaxa_cutoff: 1.e-3
  add_masks:
    enable: yes

self_cal:
  enable: true
  label: corr
  order: 10
  primary_beam: false
  calibrate_with: meqtrees
  spwid: 0
  # Imaging settings
  img_npix: 8192
  img_trim: 5540
  img_mgain: 0.9
  img_cell: 1.3
  img_weight: briggs
  img_robust: -1.5
  img_niter: 1000000
  img_auto_threshold: 3  
  img_auto_mask: 5
  img_cleanborder: 0                        
  img_facets: 11
  img_nchans: 3
  img_joinchannels: true
  img_fit_spectral_pol: 1
  img_column: CORRECTED_DATA 
  img_pol: I
  # Calibration settings
  cal_Gsols: [1,0]
  cal_DDsols: []
  cal_gain_amplitude_clip_low: 0.5 
  cal_gain_amplitude_clip_high: 1.5
  # Source finding settings
  sf_thresh_pix: 10
  sf_thresh_isl: 8
  image_1:
    enable: true
    auto_mask: 40                           
    auto_threshold: 0.5
    column: DATA
  extract_sources_1:
    enable: true
    spi: false
  calibrate_1:
    enable: true
    model: '1'
    output_data: CORR_DATA
    gain_matrix_type: GainDiagPhase
  image_2:
    enable: true
    auto_mask: 30
    auto_threshold: 0.5
  extract_sources_2:
    enable: true
    spi: false
  calibrate_2:
    enable: true
    model: '2'
    output_data: CORR_RES
    gain_matrix_type: GainDiag
  image_3:
    enable: true
    auto_mask: 10
    auto_threshold: 0.5
  extract_sources_3:
    enable: true
    spi: false 
    thresh_pix: 10
    thresh_isl: 5
  calibrate_3:
    enable: true
    model: '2+3' 
    output_data: CORR_RES
    gain_matrix_type: GainDiag
  image_4:
    enable: true
    auto_mask: 5
    auto_threshold: 0.25
  calibrate_4:
    enable: true
    model: '2+3'
    output_data: CORR_RES
    gain_matrix_type: GainDiag
    add_vis_model: true 
  image_5:
    enable: true
    auto_mask: 3
    auto_threshold: 0.25
  restore_model: 
    enable: true
    model: '2+3'
    clean_model: '4'
  flagging_summary:
    enable: true
    
sc:
  enable: no
  label: corr
  order: 12
  spwid: 0
  # Imaging settings
  img_npix: 720                          # at very least 50% padding for alias protection
  img_trim: 720
  img_mgain: 0.9                          #for major cycle of wsclean
  img_cell: 10.
  img_weight: briggs
  img_robust: -1.0
  #cleaning settings
  img_niter: 1000000
  img_auto_threshold: 3                     # Cleaning threshold for cleaning
  img_cleanborder: 0                        
  img_nchans: 3                          # Number of output channels for imaging
  img_joinchannels: true
  img_fit_spectral_pol: no                   # Fit a polynomial over frequency to each clean component
  img_pol: I
  # Calibration settings
  cal_Gsols: [10,50]                        #one gain solution each 10 time intervals and 100 channels
  cal_gain_amplitude_clip_low: 0.5          # Flag data if corresponding gain has a value below this
  cal_gain_amplitude_clip_high: 1.5         # Flag data if corresponding gain has a value above this
  cal_time_chunk: 2995
  # Island threshold for source finder (in sigma above noise)
  image_1:                                  # Make intial image 
    enable: no
    auto_threshold: 0.1
    mask_from_sky: True
    fits_mask: 'sumss_fornaxa_mask.fits'
    multi_scale: False
    multi_scale_scales: [0,10,25,40] #pixel
    column: DATA
    local_rms: False
    minuvw_m: 0
    no_update_model: True 
  image_11:
    enable: yes
    auto_threshold: 0.3
    mask_from_sky: True
    fits_mask: 'name_of_mask' #in output/masking folder
    multi_scale: False
    multi_scale_scales: [0,10,25,40] #pixel
    column: DATA
    local_rms: False
    no_update_model: False
    fit_spectral_pol: 4
    minuvw_m: 0
  calibrate_1:
    enable: yes
    output_data: CORR_DATA                  # Data to output after calibration. Options are CORR_RES (corrected residual), CORR_DATA (corrected data), RES (residual data)
    gain_matrix_type: GainDiagPhase  
    add_vis_model: True 
  image_2:
    enable: yes
    auto_threshold: 0.3
    mask_from_sky: True
    fits_mask: 'name_of_mask'
    multi_scale: False
    multi_scale_scales: [0,10,25,40] #pixel
    column: CORRECTED_DATA
    local_rms: False
    no_update_model: False
    fit_spectral_pol: 4
    minuvw_m: 0
  calibrate_2:
    enable: no
    output_data: CORR_DATA                  # Data to output after calibration. Options are CORR_RES (corrected residual), CORR_DATA (corrected data), RES (residual data)
    gain_matrix_type: GainDiagPhase
    add_vis_model: True
  image_3:
    enable: no
    auto_threshold: 0.1
    mask_from_sky: True
    fits_mask: 'name_of_mask'
    multi_scale: False
    column: CORRECTED_DATA
    local_rms: False
    no_update_model: True
    minuvw_m: 0
  calibrate_3:
    enable: no
    output_data: CORR_DATA                  # Data to output after calibration. Options are CORR_RES (corrected residual), CORR_DATA (corrected data), RES (residual data)
    gain_matrix_type: GainDiagPhase
    add_vis_model: True
  image_4:
    enable: no
    auto_threshold: 0.5
    mask_from_sky: True
    fits_mask: 'name_of_mask'
    multi_scale: True
    multi_scale_scales: [0,10,25]
    column: CORRECTED_DATA
    local_rms: True
    no_update_model: False
    minuvw_m: 0

image_HI:
  enable: true
  order: 11
  label: corr
  restfreq: '1.420405752GHz'
  npix: [1024]
  cell: 7
  weight: 'briggs'
  robust: 0
  uvcontsub: 
    enable: true
    fitorder: 1
    fitspw: null 
  sunblocker: 
    enable: true
    use_contsub: true
    threshold: 4
  doppler_corr:
    enable: true
    use_contsub: true
    telescope: meerkat
    regrid: true
    mode: 'frequency'
    nchan: 'all'
    outframe: 'bary' 
    veltype: 'radio'
    msuvcontsub: false
    fitspw: null 
    fitorder: 1
  wsclean_image:
    enable: true
    use_contsub: true
    use_doppcorr: true
    pol: I
    spwid: 0
    nchans: 'all'
    firstchan: 0
    binchans: 1
    npix: [1024]
    padding: 1.2
    cell: 7
    weight: briggs
    robust: 2
    taper: 0
    niter: 10000000
    mgain: 1.0
    automask: 5
    autothreshold: 1
    cleanborder: 0
    no-update-mod: true
    make_cube: true
    make_mask: true
  rewsclean_image:
    enable: true
    fitsmask: fa2_p1_nosub_HI.image_clean_mask.fits # or own mask '<mask-name>.fits:output' 
    niter: 10000000
    autothreshold: 0.5
  casa_image:
    enable: false
    use_contsub: true
    pol: I
    spwid: 0
    nchans: 'all'
    startchan: 0
    npix: [1024]
    cell: 7
    weight: briggs
    robust: 2
    niter: 0
    threshold: '10mJy'
    port2fits: True
  freq_to_vel:
    enable: true
  sofia:
    enable: true
    rmsMode: 'mad'
    threshold: 4.0
    flag: false
    flagregion: []
    merge: true
    mergeX: 2
    mergeY: 2
    mergeZ: 3
    minSizeX: 3
    minSizeY: 3
    minSizeZ: 5
  flagging_summary:
    enable: true 
