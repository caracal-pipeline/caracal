type: map
mapping:
  schema_version:
    type: str
    required: true

  cross_cal:
    type: map
    desc: Carry out Cross calibration of the data (delay, bandpass and gain calibration)
    mapping:
      enable: 
        type: bool
        required: true
        desc: Execute this segment.
        example: 'False'
      otfdelay:  
        type: bool
        required: false
        desc: Set whether to apply the delay calibration on the fly when solving for other calibration terms.
        example: 'True'
      uvrange: 
        type: str
        required: false
        desc: Set the U-V range for data selection, e.g. '>50'.
        example: '>50' 
      label: 
        type: str
        required: false
        desc: Label for output files.
        example: '1gc'
      clear_cal:
        type: map
        desc: Initializes dataset for calibration using CASA
        mapping:
          enable:
            type: bool
            desc: Execute intialization step
            required: true
            example: 'True'
          field:
            seq:
                - type: str
            desc: "fields to initialize"
            required: false
            example: 'fcal, bpcal, gcal, xcal, target'
          addmodel:
            type: bool
            desc: "Intializes scratch MODEL_DATA column"
            required: false
            example: 'True'
      set_model:
        type: map
        desc: Essentially setjy task from CASA.
        mapping:
          enable:
            type: bool
            desc: Execute the setjy task.
            required: false
            example: 'True'
          meerkathi_model:
            type: bool
            required: false
            desc: Force disable built-in models in MeerKATHI (NOT RECOMMENDED!)
            example: 'False'
          no_verify:
            type: bool
            desc: Enables setting standard manually.
            required: false
            example: 'False'
          field:
            type: str 
            desc: Set the field to carry out setjy on. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.   
            required: false
            example: 'fcal'
          threads:
            type: int
            desc: Set the number of threads to use when predicting local sky model using MeqTrees.
            required: false
            example: '1'

      delay_cal:
        type: map
        desc: Carry out delay correction calibration (using gaincal task from CASA).
        mapping:
          enable:
            type: bool
            desc: Execute delay correction calibration.
            required: false
            example: 'True'
          combine:
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field", "obs,scan", "scan,obs"]
            required: false
            example: 'scan'
          solint:
            type: str
            desc: Solution interval for delay-correction calibration.
            required: false
            example: 'inf'
          minsnr: 
            type: int
            desc: Minimum required SNR for solutions.
            required: false
            example: '3' 
          field:
            seq: 
              - type: str 
            desc: Set the field to estimate the delay correction from. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.      
            required: false
            example: fcal
          plot:
            type: map
            desc: Plotting dignostics plots for delay correction calibration.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'True'
              table_name:
                type: str
                desc: "Table to plot"
                required: false
                example: 'False'
              gaintype:
                type: str
                desc: "Type of gain solution table"
                required: false
                example: 'K'
              field:
                seq: 
                - type: int 
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '1'
              corr:
                type: str
                desc: "Correlation to plot. E.g. X/Y or H/V"
                required: false
                example: 'x'
              htmlname:
                type: str
                desc: "Output HTML file name"
                required: false
                example: 'crossOut'
          flag:
            type: map
            desc: Flagging based on delay correction solutions.
            mapping:
              enable:
                type: bool
                desc: Enable flagging based on delay correction solutions via CASA FLAGDATA task.
                required: false
                example: 'True'
              mode:
                type: str
                desc: Mode to set for flagging based on delay correction gains. Default used is "clip". If you want to use other modes, specify the relevant keywords from Flagdata. 
                enum: ['list', 'manual','clip','quack','shadow','elevation', 'tfcrop', 'antint','extend', 'unflag', 'summary']
                required: false
                example: 'clip'
              clipminmax:
                seq:
                  - type: float 
                desc: Specifies the minimum and maximum delay to keep, e.g. [-60, 60]. Execute order 66 on the rest. 
                required: false
                example: '-60.0, 60.0'

      bp_cal:
        type: map
        desc: Carry out bandpass calibration (using bandpass task from CASA)
        mapping: 
          enable: 
            type: bool
            desc: Executes bandpass calibration.
            required: false
            example: 'True'
          combine:
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field", "obs,scan", "scan,obs"]
            required: false
            example: 'scan'
          field: 
            seq: 
              - type: str 
            desc: Set the field to estimate the bandpass from. Specify either the field number, name or even as 'bpcal' corresponding to field specification in observation config.
            required: false
            example: 'bpcal'
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving. 
            required: false
            example: '4'
          minsnr: 
            type: int
            desc: Minimum required SNR for solutions.
            required: false
            example: '5'
          solnorm: 
            type: bool
            desc: Normalize average solution amplitudes to unity.
            required: false
            example: 'True'
          solint:
            type: str
            desc: Solution interval for delay-correction calibration.
            required: false
            example: 'inf'
          set_refant:
            type: bool
            desc: Should a reference antenna be used for this calibration
            required: false
            example: 'False' 
          remove_ph_time_var:
            type: bool
            desc: Remove large temporal phase variations from bandpass calibrator before solving.
            required: false  
            example: 'False'          
          flag:
            type: map
            desc: Flagging based on bandpass amplitude solutions.
            mapping:
              enable:
                type: bool
                desc: Enable flagging based on Bandpass correction solutions via CASA FLAGDATA task. 
                required: false
                example: 'True'
              mode:
                type: str
                desc: Mode to set for flagging based on delay correction gains. Default is "clip". If you want to use other modes, specify the relevant keywords from Flagdata.
                enum: ['list', 'manual','clip','quack','shadow','elevation', 'tfcrop', 'antint','extend', 'unflag', 'summary']
                required: false
                example: 'clip'
              clipminmax:
                seq:
                  - type: float
                desc: Specifies the minimum and maximum gain to keep, e.g. [0.1, 10].
                required: false
                example: '0.1,10.0'
          plot:
            type: map
            desc: Plotting dignostics plots for bandpass correction calibration.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'True'
              table_name:
                type: str
                desc: "Table to plot"
                required: false
                example: 'False'
              gaintype:
                type: str
                desc: "Type of gain solution table"
                required: false
                example: 'B'
              field:
                seq: 
                - type: int
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '1'
              corr:
                type: str
                desc: "Correlation to plot. E.g. X/Y or H/V"
                required: false
                example: 'x'
              htmlname:
                type: str
                desc: "Output HTML file name"
                required: false
                example: 'crossOut'

      gain_cal_flux:
        type: map
        desc: Carry out gain calibration on the flux calibrator field.
        mapping:
          enable:
            type: bool
            desc: Execute gain calibration on the flux calibrator field.
            required: false
            example: 'True'
          combine: 
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
            example: ' '
          field: 
            seq: 
              - type: str 
            desc: Set the field to estimate the gain from. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.
            required: false
            example: 'fcal'
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving.
            required: false
            example: '4'
          minsnr:
            type: int
            desc: Minimum required SNR for solutions.
            required: false
            example: '5'
          solint: 
            type: str
            desc: Time solution interval
            required: false
            example: 'inf'
          set_refant:
            type: bool
            desc: Should a reference antenna be used for this calibration
            required: false
            example: 'False'
          flag:
            type: map
            desc: Flagging based on flux-scale amplitude solutions.
            mapping:
              enable:
                type: bool
                desc: Enable flagging based on delay correction solutions via CASA FLAGDATA task. Default is False.
                required: false
                example: 'True'
              mode:
                type: str
                desc: Mode to set for flagging based on delay correction gains. Default is "clip". If you want to use other modes, specify the relevant keywords from Flagdata.
                enum: ['list', 'manual','clip','quack','shadow','elevation', 'tfcrop', 'antint','extend', 'unflag', 'summary']
                required: false
                example: 'clip'
              clipminmax:
                seq:
                  - type: float
                desc: Specifies the minimum and maximum delay to keep, e.g. [0.1, 10].
                required: false
                example: '0.1, 10.0'
          plot:
            type: map
            desc: Plotting dignostics plots for flux calibrator corrections.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'True'
              table_name:
                type: str
                desc: "Table to plot"
                required: false
                example: 'False'
              gaintype:
                type: str
                desc: "Type of gain solution table"
                required: false
                example: 'G'
              field:
                seq: 
                - type: int
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '0'
              corr:
                type: str
                desc: "Correlation to plot. E.g. X/Y or H/V"
                required: false
                example: 'x'
              htmlname:
                type: str
                desc: "Output HTML file name"
                required: false
                example: 'crossOut'

      gain_cal_gain:
        type: map
        desc: Carry out gain calibration on the gain calibrator field.
        mapping:
          enable: 
            type: bool
            desc: Execute gain calibration on the gain calibrator field.
            required: false
            example: 'True'
          combine: 
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
            example: ' '
          field:
            seq: 
              - type: str 
            desc: Set the field to estimate the gain from. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: false
            example: 'gcal'
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving.
            required: false
            example: '4'
          minsnr:
            type: int
            desc: Minimum required SNR for solutions.
            required: false
            example: '5'
          solint: 
            type: str
            desc: Time solution interval
            required: false
            example: 'inf'
          set_refant:
            type: bool
            desc: Should a reference antenna be used for this calibration
            required: false
            example: 'False'
          flag:
            type: map
            desc: Flagging based on gain amplitudes.
            mapping:
              enable:
                type: bool
                desc: Enable flagging based on delay correction solutions via CASA FLAGDATA task. Default is False.
                required: false
                example: 'True'
              mode:
                type: str
                desc: Mode to set for flagging based on delay correction gains. Default is "clip". If you want to use other modes, specify the relevant keywords from Flagdata.
                enum: ['list', 'manual','clip','quack','shadow','elevation', 'tfcrop', 'antint','extend', 'unflag', 'summary']
                required: false
                example: 'clip'
              clipminmax:
                seq:
                  - type: float
                desc: Specifies the minimum and maximum delay to keep, e.g. [0.1, 10].
                required: false
                example: '0.1, 10.0'
          plot:
            type: map
            desc: Plotting dignostics plots for gain calibrator corrections.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'True'
              table_name:
                type: str
                desc: "Table to plot"
                required: false
                example: 'table'
              gaintype:
                type: str
                desc: "Type of gain solution table"
                required: false
                example: 'G'
              field:
                seq: 
                  - type: int
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '1'
              corr:
                type: str
                desc: "Correlation to plot. E.g. X/Y or H/V"
                required: false
                example: 'x'
              htmlname:
                type: str
                desc: "Output HTML file name"
                required: false
                example: 'crossOut'
      
      transfer_fluxscale:    
        type: map
        desc: Transfers fluxscale from the flux calibrator field to the gain calibrator.
        mapping:
          enable:
            type: bool
            desc: Executes transferring flux scale.
            required: false
            example: 'True'
          reference: 
            seq:
              - type: str
            desc: Field to transfer flux sale from. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: false
            example: 'gcal'
          transfer:
            seq:
              - type: str
            desc: Field to transfer flux scale to. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: false
            example: 'fcal'
          plot:
            type: map
            desc: Enables plotting gain amplitudes for Flux and Gain calibrator field.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'True'
              table_name:
                type: str
                desc: "Table to plot"
                required: false
                example: 'JJones'
              gaintype:
                type: str
                desc: "Type of gain solution table"
                required: false
                example: 'G'
              field:
                seq: 
                - type: int
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '1'
              corr:
                type: str
                desc: "Correlation to plot. E.g. X/Y or H/V"
                required: false
                example: 'X'
              htmlname:
                type: str
                desc: "Output HTML file name"
                required: false
                example: 'crossOut'
      
      apply_delay_cal:
        type: map
        desc: Apply the delay correction calibration table to specified fields via the CASA applycal task.
        mapping: 
          enable: 
            type: bool
            desc: Executes application of delay correction calibration table.
            required: false
            example: 'True'
          field: 
            seq: 
              - type: str 
            desc: Field to select in the delay correction calibration table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal'.
            required: false
            example: 'bpcal'
          applyto: 
            seq: 
              - type: str 
            desc: Field(s) to apply the delay correction calibration table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: false
            example: 'bpcal, gcal, target, xcal'
          applymode: 
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: false
            example: 'calflag'
                           
      apply_bp_cal:
        type: map
        desc: Apply the bandpass table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of bandpass table.
            required: false
            example: 'True'
          field:
            seq: 
              - type: str 
            desc: Field to select in the bandpass table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal'.
            required: false
            example: 'bpcal'
          applyto:
            seq:
              - type: str
            desc: Field(s) to apply the bandpass table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: false
            example: 'bpcal, gcal, target, xcal'
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: false
            example: 'calflag'

      apply_gain_cal_gain:    
        type: map
        desc: Apply the gain calibration table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of gain calibration table.
            required: false
            example: "False"
          field:
            seq: 
              - type: str 
            desc: Field to select in the gain calibration table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'gcal'.
            required: false
            example: 'gcal'
          applyto:
            seq: 
              - type: str 
            desc: Field(s) to apply the gain calibration table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: false
            example: 'bpcal, gcal, target, xcal'
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: false
            example: 'calflag'
        
      apply_transfer_fluxscale:
        type: map
        desc: Apply the fluxscale table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of fluxscale table.
            required: false
            example: 'True'
          field:
            seq: 
              - type: str 
            desc: Field to select in the fluxscale table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'gcal'.
            required: false
            example: 'gcal'
          applyto:
            seq: 
              - type: str
            desc: Field(s) to apply the fluxscale table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: false
            example: 'bpcal, gcal, target, xcal'
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: false
            example: "calflag"
 
      autoflag_closure_error:   
        type: map
        desc: Flag closure errors and systematic issues based on calibrated calibrator phase.
        mapping:
          enable: 
            type: bool
            desc: Execute flagging closure errors etc.
            required: false
            example: 'False'
          scan_to_scan_threshold: 
            type: int
            desc: Sigma spread above the rest of the scans per field per channel.
            required: false
            example: '3'
          baseline_to_group_threshold:           
            type: int
            desc: Sigma above array median phase spread per scan per field per channel.
            required: false
            example: '3'
          column: 
            type: str
            desc: MS column to use.
            required: false
            example: 'CORRECTED_DATA'
          fields:
            type: str
            desc: Fields to flag. Either set 'auto' or specify as 'gcal, bpcal, target'
            required: false
            example: 'auto'
          calibrator_fields: 
            type: str
            desc: Calibrator fields to estimate the closure errors etc. from.
            required: false
            example: 'auto'
          threads: 
            type: int
            desc: Number of cores to use to carry out this process.
            required: false
            example: '1'

      flagging_summary:
        type: map
        desc: Prints out the buther's bill, i.e. data flagging summary at the end of cross calibration process. 
        mapping:
          enable: 
            type: bool
            desc: Execute printing flagging summary.            
            required: false
            example: 'True'
