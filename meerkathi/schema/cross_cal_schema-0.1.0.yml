type: map
mapping:
  schema_version:
    type: str
    required: true

  cross_cal:
    type: map
    desc: Carry out Cross calibration of the data (delay, bandpass and gain calibration)
    mapping:
      enable: 
        type: bool
        required: true
        desc: Execute this segment.
      order: 
        type: int
        required: true
        desc: Workers are executed in ascending order based on this value. 
      otfdelay:  
        type: bool
        required: false
        desc: Set whether to apply the delay calibration on the fly when solving for other calibration terms.
      uvrange: 
        type: str
        required: false
        desc: Set the U-V range for data selection, e.g. '>50'. 
      label: 
        type: str
        required: true
        desc: Label for output files.
    
      set_model:
        type: map
        desc: Essentially setjy task from CASA.
        mapping:
          enable:
            type: bool
            desc: Execute the setjy task.
            required: true
          no_verify:
            type: bool
            desc: Enables setting standard manually.
            required: false
          field:
            type: str 
            desc: Set the field to carry out setjy on. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.   
            required: true
          threads:
            type: int
            desc: Set the number of threads to use when predicting local sky model using MeqTrees.
            required: false

      delay_cal:
        type: map
        desc: Carry out delay correction calibration (using gaincal task from CASA).
        mapping:
          enable:
            type: bool
            desc: Execute delay correction calibration.
            required: true
          combine:
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field", "obs,scan", "scan,obs"]
            required: false
          solint:
            type: str
            desc: Solution interval for delay-correction calibration.
            required: false
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving. 
            required: false
          minsnr: 
            type: int
            desc: Minimum required SNR for solutions.
            required: false 
          field:
            type: str
            desc: Set the field to estimate the delay correction from. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.      
            required: true
          plot:
            type: bool
            desc: Enables plotting dignostics plots for delay correction calibration.   
            required: false
          flag:
            type: map
            desc: Flagging based on delay correction solutions.
            mapping:
              enable:
                type: bool
                desc: Enable flagging based on delay correction solutions via CASA FLAGDATA task.
                required: true
              mode:
                type: str
                desc: Mode to set for flagging based on delay correction gains. Default used is "clip". If you want to use other modes, specify the relevant keywords from Flagdata. 
                enum: ['list', 'manual','clip','quack','shadow','elevation', 'tfcrop', 'antint','extend', 'unflag', 'summary']
                required: true
              clipminmax:
                seq:
                  - type: float 
                desc: Specifies the minimum and maximum delay to keep, e.g. [-60, 60]. Execute order 66 on the rest. 
                required: false
      bp_cal:
        type: map
        desc: Carry out bandpass calibration (using bandpass task from CASA)
        mapping: 
          enable: 
            type: bool
            desc: Executes bandpass calibration.
            required: true
          combine:
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field", "obs,scan", "scan,obs"]
            required: false
          field: 
            type: str
            desc: Set the field to estimate the bandpass from. Specify either the field number, name or even as 'bpcal' corresponding to field specification in observation config.
            required: true
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving. 
            required: false
          minsnr: 
            type: int
            desc: Minimum required SNR for solutions.
            required: false
          solnorm: 
            type: bool
            desc: Normalize average solution amplitudes to unity.
            required: false
          solint:
            type: str
            desc: Solution interval for delay-correction calibration.
            required: false
          set_refant:
            type: bool
            desc: Should a reference antenna be used for this calibration
          plot: 
            type: bool
            desc: Enables plotting of bandpass solutions.
            required: false
          remove_ph_time_var:
            type: bool
            desc: Remove large temporal phase variations from bandpass calibrator before solving.
            required: false
      
      gain_cal_flux:
        type: map
        desc: Carry out gain calibration on the flux calibrator field.
        mapping:
          enable:
            type: bool
            desc: Execute gain calibration on the flux calibrator field.
            required: true
          combine: 
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
          field: 
            type: str
            desc: Set the field to estimate the gain from. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.
            required: true
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving.
            required: false
          minsnr:
            type: int
            desc: Minimum required SNR for solutions.
            required: false
          solint: 
            type: str
            desc: Time solution interval
            required: false
          set_refant:
            type: bool
            desc: Should a reference antenna be used for this calibration
          plot: 
            type: bool
            desc: Enables plotting of gains.
            required: false
         
      gain_cal_gain:
        type: map
        desc: Carry out gain calibration on the gain calibrator field.
        mapping:
          enable: 
            type: bool
            desc: Execute gain calibration on the gain calibrator field.
            required: true
          combine: 
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
          field:
            type: str
            desc: Set the field to estimate the gain from. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: true
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving.
            required: false
          minsnr:
            type: int
            desc: Minimum required SNR for solutions.
            required: false
          solint: 
            type: str
            desc: Time solution interval
            required: false
          set_refant:
            type: bool
            desc: Should a reference antenna be used for this calibration
          plot:
            type: bool
            desc: Enables plotting of gains.
            required: false
      
      transfer_fluxscale:    
        type: map
        desc: Transfers fluxscale from the flux calibrator field to the gain calibrator.
        mapping:
          enable:
            type: bool
            desc: Executes transferring flux scale.
            required: true
          reference: 
            type: str
            desc: Field to transfer flux sale from. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: true
          transfer:
            type: str
            desc: Field to transfer flux scale to. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: true
          plot: 
            type: bool
            desc: Enables plotting gain amplitudes for Flux and Gain calibrator field.
            required: false
      
      apply_delay_cal:
        type: map
        desc: Apply the delay correction calibration table to specified fields via the CASA applycal task.
        mapping: 
          enable: 
            type: bool
            desc: Executes application of delay correction calibration table.
            required: true
          field: 
            type: str
            desc: Field to select in the delay correction calibration table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal'.
            required: true
          applyto: 
            type: str
            desc: Field(s) to apply the delay correction calibration table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode: 
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true
                           
      apply_bp_cal:
        type: map
        desc: Apply the bandpass table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of bandpass table.
            required: true
          field:
            type: str
            desc: Field to select in the bandpass table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal'.
          applyto:
            type: str
            desc: Field(s) to apply the bandpass table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true

      apply_gain_cal_gain:    
        type: map
        desc: Apply the gain calibration table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of gain calibration table.
            required: true
          field:
            type: str
            desc: Field to select in the gain calibration table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'gcal'.
          applyto:
            type: str
            desc: Field(s) to apply the gain calibration table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true
        
      apply_transfer_fluxscale:
        type: map
        desc: Apply the fluxscale table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of fluxscale table.
            required: true
          field:
            type: str
            desc: Field to select in the fluxscale table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'gcal'.
          applyto:
            type: str
            desc: Field(s) to apply the fluxscale table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true
 
      autoflag_closure_error:   
        type: map
        desc: Flag closure errors and systematic issues based on calibrated calibrator phase.
        mapping:
          enable: 
            type: bool
            desc: Execute flagging closure errors etc.
            required: true
          scan_to_scan_threshold: 
            type: int
            desc: Sigma spread above the rest of the scans per field per channel.
            required: true
          baseline_to_group_threshold:           
            type: int
            desc: Sigma above array median phase spread per scan per field per channel.
            required: true
          column: 
            type: str
            desc: MS column to use.
            required: true
          fields:
            type: str
            desc: Fields to flag. Either set 'auto' or specify as 'gcal, bpcal, target'
            required: true
          calibrator_fields: 
            type: str
            desc: Calibrator fields to estimate the closure errors etc. from.
            required: true
          threads: 
            type: int
            desc: Number of cores to use to carry out this process.
            required: false

      flagging_summary:
        type: map
        desc: Prints out the buther's bill, i.e. data flagging summary at the end of cross calibration process. 
        mapping:
          enable: 
            type: bool
            desc: Execute printing flagging summary.            
            required: true
