type: map
mapping: 
  schema_version:
    type: str
    required: true

  cross_cal:
    type: map
    desc: Carry out Cross calibration of the data (delay, bandpass and gain calibration)
    mapping:
      enable: 
        type: bool
        required: true
        desc: Execute this segment.
        example: 'True'
      otfdelay:  
        type: bool
        required: false
        desc: Set whether to apply the delay calibration on the fly when solving for other calibration terms.
        example: 'True'
      uvrange: 
        type: str
        required: false
        desc: Set the U-V range for data selection, e.g. '>50'.
        example: '>50' 
      label: 
        type: str
        required: false
        desc: Label for output files.
        example: '1gc1'
      casa_version: 
        type: str
        required: false
        desc: Casa version to carry out cross-calibration. '47' means use CASA 4.7, which is recommended, unless you enjoy your data extra flag-gy. Leave empty to use the latest CASA.
        example: '47'
      set_model:
        type: map
        desc: Essentially setjy task from CASA.
        mapping:
          enable:
            type: bool
            desc: Execute the setjy task.
            required: false
            example: 'True'
          meerkathi_model:
            type: bool
            required: false
            desc: Force disable built-in models in MeerKATHI (NOT RECOMMENDED!)
            example: 'False'
          no_verify:
            type: bool
            desc: Enables setting standard manually.
            required: false
            example: 'False'
          field:
            type: str 
            desc: Set the field to carry out setjy on. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.   
            required: false
            example: 'fcal'
          threads:
            type: int
            desc: Set the number of threads to use when predicting local sky model using MeqTrees.
            required: false
            example: '8'
      primary_cal:
        type: map
        desc: Calibrating on the bandpass calibrator field
        mapping:
          enable:
            type: bool
            desc: Execute this section
            required: false
            example: 'True'
          order:
            type: str
            required: false
            desc: "Order in which to solve for gains for this field. E.g, if order is set to 'KGB', the we solve for delays, then the phase and amplitude, and finally the bandpass. The full options are: K-delay calibration; G-amplitude and phase calibration; B-bandpass calibration; A-automatic flagging (existing gains will be applied first)."
            example: KGB
          combine: 
            seq:
              - type: str
            desc: Parameter to combine different data axis for solving. Options are ['','obs', 'scan', 'spw', 'field', 'obs,scan', 'scan,ob']
            example: "'', '', scan"
            required: false
          solint:
            seq:
              - type: str
            desc: Solution interval for delay-correction calibration.
            example: "120s, 120s, inf"
            required: false
          calmode:
            seq:
              - type: str
            desc: Type of solution
            example: "a, ap, ap"
            required: false
          B_fillgaps:
            type: int
            desc: Fill flagged solution channels by interpolation
            example: "70"
            required: false
          plotgains:
            type: bool
            desc: Plot gains
            example: "True"
            required: false
          flag:
            type: map
            desc: Apply existing gains and flag corrected data
            mapping:
              column:
                type: str
                desc: Data column to flag on
                example: "corrected"
                required: false
                enum: [corrected, residual]
              usewindowstats:
                type: str
                desc: Calculate additional flags using sliding window statistics
                enum: ["none", "sum", "std", "both"]
                example: "std"
                required: false
              combinescans:
                type: bool
                desc: Accumulate data across scans depending on the value of ntime
                example: "False"
                required: false
              flagdimension:
                type: str
                desc: Dimensions along which to calculate fits (freq/time/freqtime/timefreq)
                enum: [freq, time, freqtime, timefreq]
                example: freqtime
                required: false
              timecutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "4.0"
                required: false
              freqcutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "3.0"
                required: false
              correlation:
                type: str
                desc: Correlation
                example: ""
                required: false
      secondary_cal:
        type: map
        desc: Calibrating on the amplitude/phase calibrator field
        mapping:
          enable:
            type: bool
            desc: Execute this section
            required: false
            example: 'True'
          order:
            type: str
            required: false
            desc: "Order in which to solve for gains for this field. E.g, if order is set to 'KGB', the we solve for delays, then the phase and amplitude, and finally the bandpass. The full options are: K-delay calibration; G-amplitude and phase calibration; B-bandpass calibration; A-automatic flagging (existing gains will be applied first); I-Do a self-callibration"
            example: KG
          combine: 
            seq:
              - type: str
            desc: Parameter to combine different data axis for solving. Options are ['','obs', 'scan', 'spw', 'field', 'obs,scan', 'scan,ob']
            example: "'', scan"
            required: false
          solint:
            seq:
              - type: str
            desc: Solution interval for delay-correction calibration.
            example: "120s, 120s"
            required: false
          calmode:
            seq:
              - type: str
            desc: Type of solution
            example: "a, ap, ap"
            required: false
          apply:
            type: str
            desc: Gains to apply from calibration of bandpass field
            example: B
            required: false
          plotgains:
            type: bool
            desc: Plot gains
            example: "True"
            required: false
          flag:
            type: map
            desc: Apply existing gains and flag corrected data
            mapping:
              column:
                type: str
                desc: Data column to flag on
                example: "corrected"
                required: false
                enum: [corrected, residual]
              usewindowstats:
                type: str
                desc: Calculate additional flags using sliding window statistics
                enum: ["none", "sum", "std", "both"]
                example: "std"
                required: false
              combinescans:
                type: bool
                desc: Accumulate data across scans depending on the value of ntime
                example: "False"
                required: false
              flagdimension:
                type: str
                desc: Dimensions along which to calculate fits (freq/time/freqtime/timefreq)
                enum: [freq, time, freqtime, timefreq]
                example: freqtime
                required: false
              timecutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "4.0"
                required: false
              freqcutoff:
                type: float
                desc: Flagging thresholds in units of deviation from the fit
                example: "3.0"
                required: false
              correlation:
                type: str
                desc: Correlation
                example: ""
                required: false
      apply_cal:
        type: map
        desc: Apply calibration
        mapping:
          enable:
            type: bool
            desc: Execute this section
            required: false
            example: 'True'
          applyto:
            seq:
              - type: str
            desc: Fields to apply calibration to
            required: false
            example: "bpcal, gcal, target"
          calmode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: false
            example: 'calflag'
      flagging_summary:
        type: map
        desc: Prints out the buther's bill, i.e. data flagging summary at the end of cross calibration process. 
        mapping:
          enable: 
            type: bool
            desc: Execute printing flagging summary.            
            required: false
            example: 'True'
