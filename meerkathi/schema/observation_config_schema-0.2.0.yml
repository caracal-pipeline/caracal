type: map
mapping:
  schema_version:
    type: str
    required: true

  observation_config:
    type: map
    desc: Setup some basic observation information
    mapping:
      obsinfo:
        desc: Get observation information
        type: map
        mapping:
          enable:
            desc: Execute this section 
            type: bool
            required: true
            example: 'True'
          listobs:
            desc: Run CASA listobs task to get observation information
            type: bool
            required: false
            example: 'True'
          summary_json:
            desc: Run MSUtils summary function to get observation information as JSON file which can be used to automatically configure pipeline
            type: bool
            required: false
            example: 'True'
          vampirisms:
            desc: Returns sun free time range
            type: bool
            required: false
            example: 'False'            
      target:
        desc: Target field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        seq:
          - type: str
        required: false
        example: 'auto'
      gcal:
        desc: Gain calibrator field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        seq:
          - type: str
        required: false
        example: 'auto'
      bpcal:
        desc: Bandpass calibrator field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        seq:
          - type: str
        required: false
        example: 'auto'
      fcal:
        desc: Fluxscale calibrator field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        seq:
          - type: str
        required: false
        example: 'auto'
      xcal:
        desc: Crosshand phase angle calibrator. This calibrator must be linearly polarized and have a non-zero parallactic angle coverage at the time of observation to solve for the X-Y offsets in digitizers and the absolute polarization angle of the system. Successful calibration derotates U from V.
        seq:
          - type: str
        required: false
        example: 'auto'
      reference_antenna:
        desc: Reference antenna. If 'auto' then MeerKATHI will automatically pick the reference antenna from the .JSON metadata file if available. The file name is the same as the input .MS file but with .JSON extension. This file is typically available only for old (ROACH2) MeerKAT data. For all other data the pipeline will likely throw an error and gracefully terminate. In that case the reference antenna should be set manually.
        type: str
        required: false
        example: 'auto'
      primary_beam:
        desc: Generate primary beam model
        type: map
        mapping:
          enable:
            type: bool
            desc: Execute this section
            required: False
            example: 'False'
          freq:
            desc: A single freq, or the start, end freqs, and channel width in MHz
            type: str
            required: False
            example: '855 1760 16'
          diameter:
            desc: Diameter of the required beam
            type: float
            required: False
            example: '6.0'
          pixels:
            desc: Number of pixels on one side
            type: int
            required: False
            example: '256'
          coefficients:
            desc: Coeficients type
            type: str
            required: False
            enum: [me, mh]
            example: 'me'
          coefficients_file:
            type: str
            desc: File needed for generating PBs. meerkat_beam_coeffs_ah_zp_dct.npy for MeerKAT Holography beams (coefficient = mh) and meerkat_beam_coeffs_em_zp_dct.npy for MeerKAT EM sims(me).
            required: False
            example: 'meerkat_beam_coeffs_em_zp_dct.npy'    
