type: map
mapping:
  schema_version:
    type: str
    required: true

  general:
    desc: General pipeline information, data IDs, prefixes for output
    type: map
    mapping: 
      data_path:
        type: str
        required: false
        desc: where MeerKATHI (over-) writes HDF5 files and JSON info files downloaded by get_data below
      msdir:
        type: str
        required: true
        desc: where MeerKATHI will write and expect to find measurement set (MS) files
      input:
        type: str
        required: true
        desc: where MeerKATHI expects to find various input files (e.g., RFI flagging strategy files).
      output:
        type: str
        required: true
        desc: where MeerKATHI writes output products
      prefix:
        type: str
        required: true
        desc: Prefix for MeerKATHI output products

  get_data:
    type: map
    desc: Download and/or convert/unarchive data so that its in the MS format for further processing
    mapping:
      enable: 
        type: bool
        desc: execute this segment
        required: true
      order: 
        type: int
        required: true
        desc: Workers are executed in ascedning order based on this value.
      dataid:
        seq:
          - type: str
        required: false
        desc: Basename of MS. For MeerKAT data to be downloaded by MeerKATHI, this should be the data ID of the observation
      meerkat_query_available:
        type: map
        desc: query the MeerKAT archive to look for HDF5 files and metadata (but no download yet; this is set further below)
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
          poll_mode:
            type: str
            enum: ["poll", "override"]
            required: true
            desc: Query the MeerKAT archive to look for HDF5 files and metadata (but no download yet; this is set furher below)
          query_url:
            type: str
            required: false
            desc: MeerKAT Apache Solr server
          required_intents:
            seq:
              - type: str
#                enum: ["target", "bpcal", "gcal", "fcal"]
            desc: These better be here for imaging, otherwise manual intervention is required
          product_type_name:
            type: str
            desc: Change only if you want data not from MeerKAT (e.g., KAT7)
          minimum_observation_duration:
            type: float
            desc: Minimum observation time (in hours)
          product_num_channels:
            type: int
            enum: [4096, 32768]
          when_observed:
            type: str
            desc: Range of dates in the form '[NOW/DAY-7DAYS TO NOW/DAY]'
          description_matches:
            type: str
            desc: Description matches. e.g, '.*'
          required_fields:
            seq:
              - type: str
            desc: Only download data with these fields

      download:
        type: map
        desc: Download data from a remote source
        mapping:
          enable:
            type: bool
            desc: Execute this worker
          download_mode:
            type: str
            enum: ["meerkat", "manual"]
            desc: If manual you can specify your url to, say, NRAO ftp server-hosted file here. MeerKAT is filled automatically
          data_url:
            type: str
            desc: Download data from this URL
          reset:
            type: bool
            desc: Overwrite the data if it already exists

      h5toms:
        type: map
        desc: Convert HDF5 files in data_path to MS files; the latter are written to msdir; also creates a MS.TAR file. (This only works for MeerKAT HDF5 files)
        mapping:
          enable:
            type: bool
            desc: Execute this segment
          tar: 
            type: bool
            desc: Create a tarbal of the converted MS.
          channel_range:
            type: str
            desc: Only exctract channels in this range (0-based, inclusive; comma seperated string)
          full_poll:
            type: bool
            desc: Extract all four correlations instead of only the XX,YY
          flags: 
            type: str
            desc: List of online flags to apply (from 'static,cam,data_lost,ingest_rfi,cal_rfi,predicted_rfi', default is all flags, '' will apply no flags)

      untar:
        type: map
        desc: Unarchive from MS from a archive file.
        mapping:
          enable:
            type: bool
            desc: Execute this segment
          tar_options: 
            type: str
            desc: Options to parse to 'tar' command. Default is 'xvf'


  observation_config:
    type: map
    desc: Setup some basic observation information
    mapping:
      order:
        desc: Order in queue of workers
        type: int
        required: true
      obsinfo:
        desc: Get observation information
        type: map
        mapping:
          enable:
            desc: Execute this section 
            type: bool
            required: true
          listobs:
            desc: Run CASA listobs task to get observation information
            type: bool
            required: true
          summary_json:
            desc: Run MSUtils summary function to get observation information as JSON file which can be used to automatically configure pipeline
            type: bool
            required: true
      target:
        desc: Target field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        type: str
        required: true
      gcal:
        desc: Gain calibrator field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        type: str
        required: true
      bpcal:
        desc: Bandpass calibrator field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        type: str
        required: true
      fcal:
        desc: Fluxscale calibrator field. If set to 'auto' then will automatically set using JSON file from 'obsinfo'
        type: str
        required: true
      reference_antenna:
        desc: Reference antenna. If set to 'auto' then will automatically set using metadata file (only for meerkat data)
        type: str
        required: true
      nchans:
        desc: Number of channels. If set to 0 then will automatically set using metadata file (only for meerkat data)
        type: int
        required: true
      firstchanfreq:
        desc: First frequency channel. If set to 0 then will automatically set using metadata file (only for meerkat data)
        type: int
        required: true
      lastchanfreq:
        desc: Last frequency. If set to 0 then will automatically set using metadata file (only for meerkat data)
        type: int
        required: true
      chanwidth:
        desc: Channel width. If set to 0 then will automatically set using metadata file (only for meerkat data)
        type: int
        required: true


  prepare_data:
    desc: Prepare the data for calibration and imaging.
    type: map
    mapping:
      enable:
        desc: Executes the data preparation step.
        type: bool
        required: true
      order: 
        desc: Order in queue of workers.
        type: int
        required: true
      fixvis:
        desc: Fixes the UVW coordinates through the CASA task fixvis.
        type: map
        mapping:
          enable:
            desc: Enable execution of fixvis.
            type: bool
            required: false

      prepms:
        desc: Add BITFLAG column to MS.
        type: map
        mapping: 
          enable: 
            desc: Enable addition of BITFLAG column to MS.
            type: bool
            required: false
          add_imaging_cols:
            desc: Adds imaging columns to the measurement set.
            type: bool
            required: false

      add_spectral_weights: 
        desc: Add spectral weights column to the measurement set.
        type: map
        mapping: 
          enable: 
            desc: Enables addition of spectral weights column to the measurement set.
            type: bool
            required: false

  flagging:
    desc: Pre-calibration flagging of the data.
    type: map
    mapping:
      enable: 
        desc: Execute pre-calibration flagging of the data.
        type: bool
        required: true
      order:
        desc: Order in queue of workers. Generally a non-negative integer. 
        type: int
        required: true

      autoflag_autocorr_powerspectra:
        desc: Flags antennas based on drifts in the scan average of the auto correlation spectra per field. This doesn't strictly require any calibration. It is also not field structure dependent, since it is just based on the DC of the field. Compares scan to median power of scans per field per channel. Also compares antenna to median of the array per scan per field per channel. This should catch any antenna with severe temperature problems.
        type: map
        mapping:
          enable:
            desc: Enables flagging of antennas based on drifts in the scan average of the auto correlation spectra per field.
            type: bool
            required: false
          scan_to_scan_threshold:
            desc: Threshold for flagging in sigma above the rest of the scans per field per channel.
            type: int
            required: false
          antenna_to_group_threshold: 
            desc: Threshold for flagging in sigma above array median power spectra per scan per field per channel.
            type: int
            required: false
          column:
            desc: Data column to flag.
            type: str
            required: false
          fields:
            desc: Fields to flag. Given as 'auto' or comma-seperated keys (keys in gcal, bpcal, target).
            type: str
            required: false
          calibrator_fields: 
            desc: Calibrator fields. Given as 'auto' or comma-seperated keys (keys in gcal, bpcal).
            type: str
            required: false
          threads: 
            desc: Number of threads to use.
            type: int
            required: false

      flag_autocorr:
        desc: Flag autocorrelations. Through CASA flagdata task.
        type: map
        mapping:
          enable:
            desc: Enables flagging of autocorrelations.
            type: bool
            required: false

      quack_flagging:
        desc: Do quack flagging, i.e. flag the begining and/or end chunks of each scan. Again, through FLAGDATA.
        type: map
        mapping:
          enable:
            desc: Enable quack flagging.
            type: bool
            required: false
          quackinterval:
            desc: Time interval (in seconds) to flag. 
            type: float
            required: false
          quackmode: 
            desc: Quack flagging mode. Either 'beg', which flags scan begining, 'endb', which flags end of the scan, 'end', which flags everything but the first specified seconds of the scan and 'tail' which flags all but the last specified seconds of the scan. 
            type: str
            enum: ["beg", "endb", "end", "tail"]
            required: false

      flag_spw: 
        desc: Flag spectral windows/channels. Of course, through FLAGDATA.
        type: map
        mapping: 
          enable:
            desc: Enable flagging spectral windows/ channels.
            type: bool
            required: false
          channels: 
            desc: Channels to flag. Given as "spectral window index:start channel ~ end channel", e.g. "*:856~880MHz". End channel not inclusive.
            type: str
            required: false

      flag_time: 
        desc: Flag timerange in the data using CASA FLAGDATA task.
        type: map
        mapping: 
          enable: 
            desc: Enabla flagging timeranges.
            type: bool
            required: false
          timerange: 
            desc: Timerange to flag. Given in format 'YYYY/MM/DD/HH:MM:SS-YYYY/MM/DD/HH:MM:SS'.
            type: str
            required: false

      flag_antennas:
        desc: Flag bad antennas. Or just the ones you have sworn a vendetta against.
        type: map
        mapping:
          enable: 
            desc: Enables flagging of bad antennas. 
            type: bool
            required: false
          antennas:
            desc: Antennas to flag. Follows the CASA Flagdata syntax. 
            type: str
            required: false

      flag_scan:
        desc: Flag bad scans. Uses CASA Flagdata task.
        type: map
        mapping: 
          enable:
            desc: Enables flagging of bad scans. 
            type: bool
            required: false
          scans: 
            desc: Scans to flag. CASA flagdata syntax.
            type: str
            required: false

      static_mask:
        desc: Apply static mask to flag out known RFI, Meerkat specific. 
        type: map
        mapping: 
          enable:
            desc: Enables the application of static mask on the data.
            type: bool
            required: false
          mask: 
            desc: The mask to apply. 
            type: str
            required: false
          uvrange:
            desc: UV range to select (CASA style range, e.g. lower~upper) for flagging. Leave blank for entire array.
            type: str
            required: false

      autoflag_rfi:
        desc: Flag RFI using AOFlagger software. 
        type: map
        mapping:   
          enable: 
            desc: Enable RFI flagging with AOFlagger.
            type: bool
            required: false
          strategy: 
            desc: The AOFlagger strategy file to use.
            type: str
            required: false

      flagging_summary:
        desc: Write flagging summary at the end of the pre-calibration flagging. Uses CASA FLAGDATA in "summary" mode.
        type: map
        mapping:
          enable:
            desc: Enables the writing of flagging summary.
            type: bool
            required: false 

  cross_cal:
    type: map
    desc: Carry out Cross calibration of the data (delay, bandpass and gain calibration)
    mapping:
      enable: 
        type: bool
        required: true
        desc: Execute this segment.
      order: 
        type: int
        required: true
        desc: Workers are executed in ascending order based on this value. 
      otfdelay:  
        type: bool
        required: false
        desc: Set whether to apply the delay calibration on the fly when solving for other calibration terms.
      uvrange: 
        type: str
        required: false
        desc: Set the U-V range for data selection, e.g. '>50'. 
      label: 
        type: str
        required: true
        desc: Label for output files.
    
      set_model:
        type: map
        desc: Essentially setjy task from CASA.
        mapping:
          enable:
            type: bool
            desc: Execute the setjy task.
            required: true
          no_verify:
            type: bool
            desc: Enables setting standard manually.
            required: false
          field:
            type: str 
            desc: Set the field to carry out setjy on. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.   
            required: true

      delay_cal:
        type: map
        desc: Carry out delay correction calibration (using gaincal task from CASA).
        mapping:
          enable:
            type: bool
            desc: Execute delay correction calibration.
            required: true
          combine:
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
          solint:
            type: str
            desc: Solution interval for delay-correction calibration.
            required: false
          field:
            type: str
            desc: Set the field to estimate the delay correction from. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.      
            required: true
          plot:
            type: bool
            desc: Enables plotting dignostics plots for delay correction calibration.   
            required: false
          flag:
            type: map
            desc: Flagging based on delay correction solutions.
            mapping:
              enable:
                type: bool
                desc: Enable flagging based on delay correction solutions via CASA FLAGDATA task.
                required: true
              mode:
                type: str
                desc: Mode to set for flagging based on delay correction gains. Default used is "clip". If you want to use other modes, specify the relevant keywords from Flagdata. 
                enum: ['list', 'manual','clip','quack','shadow','elevation', 'tfcrop', 'antint','extend', 'unflag', 'summary']
                required: true
              clipminmax:
                seq:
                  - type: float 
                desc: Specifies the minimum and maximum delay to keep, e.g. [-60, 60]. Execute order 66 on the rest. 
                required: false
      bp_cal:
        type: map
        desc: Carry out bandpass calibration (using bandpass task from CASA)
        mapping: 
          enable: 
            type: bool
            desc: Executes bandpass calibration.
            required: true
          combine:
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
          field: 
            type: str
            desc: Set the field to estimate the bandpass from. Specify either the field number, name or even as 'bpcal' corresponding to field specification in observation config.
            required: true
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving. 
            required: false
          minsnr: 
            type: int
            desc: Minimum required SNR for solutions.
            required: false
          solnorm: 
            type: bool
            desc: Normalize average solution amplitudes to unity.
            required: false
          solint:
            type: str
            desc: Solution interval for delay-correction calibration.
            required: false
          plot: 
            type: bool
            desc: Enables plotting of bandpass solutions.
            required: false
          remove_ph_time_var:
            type: bool
            desc: Remove large temporal phase variations from bandpass calibrator before solving.
            required: false
      
      gain_cal_flux:
        type: map
        desc: Carry out gain calibration on the flux calibrator field.
        mapping:
          enable:
            type: bool
            desc: Execute gain calibration on the flux calibrator field.
            required: true
          combine: 
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
          field: 
            type: str
            desc: Set the field to estimate the gain from. Specify either the field number, name or even as 'fcal' corresponding to field specification in observation config.
            required: true
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving.
            required: false
          minsnr:
            type: int
            desc: Minimum required SNR for solutions.
            required: false
          plot: 
            type: bool
            desc: Enables plotting of gains.
            required: false
         
      gain_cal_gain:
        type: map
        desc: Carry out gain calibration on the gain calibrator field.
        mapping:
          enable: 
            type: bool
            desc: Execute gain calibration on the gain calibrator field.
            required: true
          combine: 
            type: str
            desc: Parameter to combine different data axis for solving.
            enum: ["","obs", "scan", "spw", "field"]
            required: false
          field:
            type: str
            desc: Set the field to estimate the gain from. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: true
          minnrbl: 
            type: int
            desc: Minimum number of baselines required (per antenna) for solving.
            required: false
          minsnr:
            type: int
            desc: Minimum required SNR for solutions.
            required: false
          plot:
            type: bool
            desc: Enables plotting of gains.
            required: false
      
      transfer_fluxscale:    
        type: map
        desc: Transfers fluxscale from the flux calibrator field to the gain calibrator.
        mapping:
          enable:
            type: bool
            desc: Executes transferring flux scale.
            required: true
          reference: 
            type: str
            desc: Field to transfer flux sale from. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: true
          transfer:
            type: str
            desc: Field to transfer flux scale to. Specify either the field number, name or even as 'gcal' corresponding to field specification in observation config.
            required: true
          plot: 
            type: bool
            desc: Enables plotting gain amplitudes for Flux and Gain calibrator field.
            required: false
      
      apply_delay_cal:
        type: map
        desc: Apply the delay correction calibration table to specified fields via the CASA applycal task.
        mapping: 
          enable: 
            type: bool
            desc: Executes application of delay correction calibration table.
            required: true
          field: 
            type: str
            desc: Field to select in the delay correction calibration table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal'.
            required: true
          applyto: 
            type: str
            desc: Field(s) to apply the delay correction calibration table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode: 
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true
                           
      apply_bp_cal:
        type: map
        desc: Apply the bandpass table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of bandpass table.
            required: true
          field:
            type: str
            desc: Field to select in the bandpass table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal'.
          applyto:
            type: str
            desc: Field(s) to apply the bandpass table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true

      apply_gain_cal_gain:    
        type: map
        desc: Apply the gain calibration table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of gain calibration table.
            required: true
          field:
            type: str
            desc: Field to select in the gain calibration table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'gcal'.
          applyto:
            type: str
            desc: Field(s) to apply the gain calibration table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true
        
      apply_transfer_fluxscale:
        type: map
        desc: Apply the fluxscale table to specified fields via the CASA applycal task.
        mapping:
          enable:
            type: bool
            desc: Executes application of fluxscale table.
            required: true
          field:
            type: str
            desc: Field to select in the fluxscale table. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'gcal'.
          applyto:
            type: str
            desc: Field(s) to apply the fluxscale table to. Specify either the field number, name or as corrsponding to field spec in observation config, e.g. 'bpcal, gcal, target'.
            required: true
          applymode:
            type: str
            desc: Calibration mode, the default being "calflag" - calibrates and applies flags from solutions. See CASA documentation for info on other modes.
            enum: ["=", "calflag", "calflagstrict", "trial", "flagonly", "flagonlystrict"]
            required: true
 
      autoflag_closure_error:   
        type: map
        desc: Flag closure errors and systematic issues based on calibrated calibrator phase.
        mapping:
          enable: 
            type: bool
            desc: Execute flagging closure errors etc.
            required: true
          scan_to_scan_threshold: 
            type: int
            desc: Sigma spread above the rest of the scans per field per channel.
            required: true
          baseline_to_group_threshold:           
            type: int
            desc: Sigma above array median phase spread per scan per field per channel.
            required: true
          column: 
            type: str
            desc: MS column to use.
            required: true
          fields:
            type: str
            desc: Fields to flag. Either set 'auto' or specify as 'gcal, bpcal, target'
            required: true
          calibrator_fields: 
            type: str
            desc: Calibrator fields to estimate the closure errors etc. from.
            required: true
          threads: 
            type: int
            desc: Number of cores to use to carry out this process.
            required: false

      flagging_summary:
        type: map
        desc: Prints out the buther's bill, i.e. data flagging summary at the end of cross calibration process. 
        mapping:
          enable: 
            type: bool
            desc: Execute printing flagging summary.            
            required: true


  inspect_data:
    type: map
    desc: Dignostic plots of the first-pass cross-calibrated data.
    mapping:
      enable:
        type: bool
        desc: Executes dignostic plotting of the first-pass cross-calibrated data.
        required: true
      order: 
        type: int
        desc: The order in which this step will be executed in the pipeline.
        required: true
      label: 
        type: str
        desc: Lable for output products (plots etc.) for this step.
        required: true

      real_imag:
        type: map
        desc: Plot real vs imaginary parts of data.
        mapping:
          enable:
            type: bool 
            desc: Executed the real v/s imaginary data plotting.
            required: true
          fields:
            type: str
            desc: Fields to plot. Specify by field id, index or keys like, gcal, bpcal.
            required: true
          column: 
            type: str
            desc: Data column to plot.
            required: true
          avgtime: 
            type: str
            desc: Time to average for plotting, in seconds.
            required: false
          avgchannel: 
            type: str
            desc: Number of channels to average for plotting.       
            required: false

      amp_phase:
        type: map
        desc: Plot Amplitude vs Phase for  data.    
        mapping:
          enable:
            type: bool
            desc: Executes the plotting of amplitude v/s phase for data.
            required: true
          fields:
            type: str
            desc: "Fields to plot. Specify by field id, index or keys like: gcal, bpcal."
            required: true
          column:
            type: str
            desc: Data column to plot.
            required: true
          avgtime:    
            type: str
            desc: Time to average for plotting, in seconds.
            required: false
          avgchannel:
            type: str
            desc: Number of channels to average for plotting.
            required: false
      
      amp_uvwave:
        type: map
        desc: Plot data amplitude v/s  uvwave.
        mapping: 
          enable: 
            type: bool
            desc: Executes plotting data amplitude as a function of uvwave.  
            required: true
          fields:
            type: str
            desc: "Fields to plot. Specify by field id, index or keys like: gcal, bpcal."
            required: true
          column:
            type: str
            desc: Data column to plot.
            required: true
          avgtime:
            type: str
            desc: Time to average for plotting, in seconds.
            required: false
          avgchannel:
            type: str
            desc: Number of channels to average for plotting.
            required: false

      amp_ant:
        type: map
        desc: Plot data amplitde v/s antenna.
        mapping: 
          mapping:
          enable:
            type: bool
            desc: Executes plotting data amplitude v/s antennas.
            required: true
          fields:
            type: str
            desc: "Fields to plot. Specify by field id, index or keys like: gcal, bpcal."
            required: true
          column:
            type: str
            desc: Data column to plot.
            required: true
          avgtime:
            type: str
            desc: Time to average for plotting, in seconds.
            required: false
          avgchannel:
            type: str
            desc: Number of channels to average for plotting.
            required: false

      phase_uvwave:
        type: map
        desc: Plot data phase v/s uvwave.
        mapping:
          enable:
            type: bool
            desc: Executes plotting data phase v/s uvwave.
            required: true
          fields:
            type: str
            desc: "Fields to plot. Specify by field id, index or keys like: gcal, bpcal."
            required: true
          column:
            type: str
            desc: Data column to plot.
            required: true
          avgtime:
            type: str
            desc: Time to average for plotting, in seconds.
            required: false
          avgchannel:
            type: str
            desc: Number of channels to average for plotting.
            required: false
      
      amp_scan:
        type: map
        desc: Plot data amplitude v/s scan number.
        mapping:
          enable:
            type: bool
            desc: Executes plotting data amplitude v/s scan number.
            required: true
          fields:
            type: str
            desc: "Fields to plot. Specify by field id, index or keys like: gcal, bpcal."
            required: true
          column:
            type: str
            desc: Data column to plot.
            required: true
          avgtime:
            type: str
            desc: Time to average for plotting, in seconds.
            required: false
          avgchannel:
            type: str
            desc: Number of channels to average for plotting.
            required: false

  split_target:
    desc: Split and average target data
    type: map
    mapping:
      enable:
        desc: Execute this worker
        type: bool
        required: true
      order:
        desc: Order of worker in queue
        type: int
        required: true
      label:
        desc: Label for new data set
        type: str
        required: true
      split:
        desc: Split data
        type: map
        mapping:
          enable:
            desc: Execute this section
            type: bool
            required: true
          time_average:
            desc: Time averaging
            type: str
            required: true
          freq_average:
            desc: Frequency averaging
            type: int
            required: true
      obsinfo:
        desc: Get observation information
        type: map
        mapping:
          enable:
            desc: Execute this section
            type: bool
            required: true
          listobs:
            desc: Run CASA listobs
            type: bool
            required: true
          summary_json:
            desc: Run MSUtils function
            type: bool
            required: true
      prepms:
        desc: Run MSUtils prepms function
        type: map
        mapping:
          enable:
            desc: Run this section
            type: bool
            required: true


  selfcal:
    type: map
    desc: Perform Self calibration on the data
    mapping:
      enable:
        type: bool
        desc: Execute this segment
        required: true
      label:
        type: str
        desc: Label to tag the output files
        required: true
      order:
        type: int
        desc: Workers are executed in ascedning order based on this value
        required: true
      primary_beam:
        type: bool
        desc: Use primary beam
        required: true
      calibrate_with:
        type: str
        enum: ["meqtrees", "cubical"]
        desc: Tool to use for calibration
        required: true
      spwid:
        type: int
        desc: Provide spectral window id
        required: true
      img_npix:
        type: int
        desc: Number of pixels to create an image (i.e. at very least 50% padding for alias protection)
        required: true
      img_trim:
        type: int
        desc: Number of pixels in output image
        required: true
      img_mgain:
        type: float
        desc: Image CLEANing gain
        required: true
      img_cell:
        type: float
        desc: Image pixel size (arcsec)
        required: true
      img_weight:
        type: str
        enum: ["briggs", "uniform", "natural"]
        desc: Image weighting type
        required: true
      img_robust:
        type: float
        desc: Briggs robust value
        required: false
      img_niter:
        type: int
        desc: Number of cleaning iterations
        required: true
      img_auto_threshold:
        type: int
        desc: Stopping threshold for cleaning
        required: true
      img_auto_mask:
        type: int
        desc: Masking threshold (will be recalculated every clean major loop)
        required: true
      img_cleanborder:
        type: int
        desc: Clean border
        required: false
      img_facets:
        type: int
        desc: Number facet to image
        required: false
      img_nchans:
        type: int
        desc: Number of channesls in output image
        required: false
      img_joinchannels:
        type: bool
        desc: Join channels to create MFS image
        required: true
      img_fit_spectral_pol:
        type: int
        desc: Fit a polynomial over frequency to each clean component
        required: false
      img_column:
        type: str
        enum: ["DATA", "CORR_DATA"]
        desc: Column to image
        required: false
      img_pol:
        type: str
        enum: ["I", "U", "Q", "V"]
        desc: Stokes image to create
        required: true
      cal_Gsols:
        type: str
        enum: ["auto", "time_bins", "freq_bins"]
        desc: Calibration solution intervals
        required: false                          # if not specified full interval is selected
      cal_DDsols:
        seq:
          - type: int
        desc: Direction dependent gain solution intervals
        required: false
      cal_gain_amplitude_clip_low:
        type: float
        desc: Lower gain amplitude clipping
        required: true
      cal_gain_amplitude_clip_high:
        type: float
        desc: Higher gain amplitude clipping
        required: true
      sf_thresh_pix:
        type: int
        desc: Source finder pixel threshold
        required: true
      sf_thresh_isl:
        type: int
        desc: Source finder island threshold
        required: true

      image_1:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          auto_mask:
            type: int
            desc: Auto masking threshold
            required: true
          auto_threshold:
            type: float
            desc: Auto clean threshold
            required: true
          column:
            type: str
            enum: ["DATA", "CORR_DATA"]
            desc: Column to image
            required: false

      extract_sources_1:
        type: map
        desc: Source finding parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          spi:
            type: bool
            desc: Extract source spectral index
            required: false            # if not specified no spi will be determined
          thresh_pix:
            type: int
            desc: Source finder pixel threshold
            required: false
          thresh_isl:
            type: int
            desc: Source finder island threshold
            required: false

      calibrate_1:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
          output_data:
            type: str
            enum: ["CORR_RES", "CORR_DATA", "RES"]
            desc: Data to output after calibration
            required: true
          gain_matrix_type:
            type: str
            enum: ["GainDiagPhase", "GainDiag", "Gain2x2"]
            desc: Gain matrix type
            required: true
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation
            required: false

      image_2:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          auto_mask:
            type: int
            desc: Auto masking threshold
            required: true
          auto_threshold:
            type: float
            desc: Auto clean threshold
            required: true
          column:
            type: str
            enum: ["DATA", "CORR_DATA"]
            desc: Column to image
            required: false

      extract_sources_2:
        type: map
        desc: Source finding parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          spi:
            type: bool
            desc: Extract source spectral index
            required: false            # if not specified no spi will be determined
          thresh_pix:
            type: int
            desc: Source finder pixel threshold
            required: false
          thresh_isl:
            type: int
            desc: Source finder island threshold
            required: false

      calibrate_2:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
          output_data:
            type: str
            enum: ["CORR_RES", "CORR_DATA", "RES"]
            desc: Data to output after calibration
            required: true
          gain_matrix_type:
            type: str
            enum: ["GainDiagPhase", "GainDiag", "Gain2x2"]
            desc: Gain matrix type
            required: true
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation
            required: false

      image_3:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          auto_mask:
            type: int
            desc: Auto masking threshold
            required: true
          auto_threshold:
            type: float
            desc: Auto clean threshold
            required: true
          column:
            type: str
            enum: ["DATA", "CORR_DATA"]
            desc: Column to image
            required: false

      extract_sources_3:
        type: map
        desc: Source finding parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          spi:
            type: bool
            desc: Extract source spectral index
            required: false            # if not specified no spi will be determined
          thresh_pix:
            type: int
            desc: Source finder pixel threshold
            required: false
          thresh_isl:
            type: int
            desc: Source finder island threshold
            required: false

      calibrate_3:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
          output_data:
            type: str
            enum: ["CORR_RES", "CORR_DATA", "RES"]
            desc: Data to output after calibration
            required: true
          gain_matrix_type:
            type: str
            enum: ["GainDiagPhase", "GainDiag", "Gain2x2"]
            desc: Gain matrix type
            required: true
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation
            required: false
      image_4:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          auto_mask:
            type: int
            desc: Auto masking threshold
            required: true
          auto_threshold:
            type: float
            desc: Auto clean threshold
            required: true
          column:
            type: str
            enum: ["DATA", "CORR_DATA"]
            desc: Column to image
            required: false
      calibrate_4:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
          output_data:
            type: str
            enum: ["CORR_RES", "CORR_DATA", "RES"]
            desc: Data to output after calibration
            required: true
          gain_matrix_type:
            type: str
            enum: ["GainDiagPhase", "GainDiag", "Gain2x2"]
            desc: Gain matrix type
            required: true
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation
            required: false
      image_5:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          auto_mask:
            type: int
            desc: Auto masking threshold
            required: true
          auto_threshold:
            type: float
            desc: Auto clean threshold
            required: true
          column:
            type: str
            enum: ["DATA", "CORR_DATA"]
            desc: Column to image
            required: false             # If not specified, CORR_DATA column will be imaged
      restore_model:
        type: map
        desc: Restore modelled to final calibrated residual image
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
          clean_model: 
            type: str
            desc: Clean model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
      flagging_summary:
        type: map
        desc: Output the flagging summary
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true

  image_HI:
    desc: Create HI data cube and detect sources therein
    type: map
    mapping:
      enable:
        desc: Execute segment image_HI (yes/no). Default is yes. 
        type: bool
        required: true
      order:
        desc: Order in queue of workers. Default is 11.
        type: int
        required: false
      label:
        desc: Label of names of MS data sets to be used. MS data set names will always start with the data set id, followed by a hyphen, followed by desc. Default is corr.
        type: str
        required: false
        
      restfreq:
        desc: Rest frequency default value for this worker. Default is '1.420405752GHz'.
        type: str
        required: false
      npix:
          seq:
            -  type: int
          desc: Default number of pixels (wherever npix is requested) in this worker. List of integers (width and height) or a single integer for square images. Default is 1024.
          required: false
      cell:
        desc: Default scale of a pixel in arcsec. Default is 7.
        type: float
        required: false
      weight:
        desc: Default weight for the worker. Weightmode can be natural, uniform, briggs. When using Briggs weighting, the Robustness parameter robust has to be specified in addition. Default is natural.
        type: str
        required: false
      robust:
        desc: Default robust parameter in case of Briggs weighting. Default is 2.
        type: float
        required: false
      uvcontsub:
        desc: Perform a continuum subtraction on the visibilities by fitting a fitorderth-order polynomial to xx and yy correlations at each time step.
        type: map
        mapping:
          enable:
            desc: Execute segment uvcontsub (yes/no). Default is yes.
            type: bool
            required: false
          fitorder:
            desc: Order of the polynomial to be subtracted. Default is 1.
            type: int
            required: false
          fitspw:
            desc: Selection of line-free channels using CASA syntax (e.g. '0:0~100;150:300'). If set to null, a fit to all unflagges visibilities will be performed. (Defaults to null)
            type: str
            required: false
      sunblocker:
        desc: Use sunblocker to remove solar RFI. See description of sunblocker on github repository gigjozsa/sunblocker in method phazer of module sunblocker.py.
        type: map
        mapping:
          enable:
            desc: Execute segment sunblocker (yes/no). Default is yes.
            type: bool
            required: false
          use_contsub:
            desc: Execute sunblocker on continuum-subtracted data (otherwise use non-continuum-subtracted data) (yes/no). Default is yes.
            type: bool
            required: false
          imsize:
            desc: Image size (use the same as in wsclean_image or casa_image). Default is worker npix
            type: int
            required: false
          cell:
            desc: Cell size in arcsec (use the same as in wsclean_image or casa_image). Default is worker cell
            type: float
            required: false
          threshold:
            desc: Distance from average beyond which data are flagged in units of sigma. Default is 4.
            type: float
            required: false
      wsclean_image:
        desc: Use WSClean to create line data cube. See WSclean wiki on sourceforge.
        type: map
        mapping:
          enable:
            desc: Execute segment wsclean_image (yes/no). Default is yes.
            type: bool
            required: false
          use_contsub:
            desc: Execute wsclean_image on continuum-subtracted data (otherwise use non-continuum-subtracted data) (yes/no). Default is yes.
            type: bool
            required: false
          pol:
            desc: Polarizations in output cube (I,Q,U,V,XX,YY,XY,YX,RR,LL,RL,LR and combinations). Default is I.
            type: str
            required: false
          spwid:
            desc: Spectral window to use. Default is 0.
            type: int
            required: false
          nchans:
            desc: Number of channels to analyse, 'all' or an integer number. Default is 'all'
            type: text
            required: false
          channelrange:
            desc: Channels to analyze. Set to 'all' to use all channels or [start channel, end channel] for a channel range. Default is [0, nchans].
            matching: "any"
            seq:
              - type: int
              - type: str
            required: false
          npix:
            desc: Image size in pixels. List of integers (width and height) or a single integer for square images. Default is Worker default for npix.
            type: seq
            seq:
              - type: int
            required: false
          trim:
            desc: After inversion, trim the images to the given size. List of integers (width and height) or a single integer for a square image. Default is 512.
            type: seq
            seq:
              - type: int
            required: false
          channelsout:
            desc: Number of output channels or 'all'. The bandwidth will be split into this number of channels. Default is 'all'
            type: text
            required: false
          mgain:
            desc: Cleaning gain for major iterations, Ratio of peak that will be subtracted in each major iteration. Default is 0.9.
            type: float
            required: false
          cell:
            desc: Scale of a pixel. Default unit is arcsec, but can be specificied, e.g. 'scale 20asec'. Default is Worker default for cell.
            type: text
            required: false
          weight:
            desc: Weightmode can be natural, uniform, briggs. When using Briggs weighting, the Robustness parameter robust has to be specified in addition. Default is Worker default for weight.
            type: str
            required: false
          robust: 
            desc: Robust parameter in case of Briggs weighting. Default is 2.
            type: float
            required: false
          niter:
            desc: Maximum number of clean iterations to perform. Default is 1000000.
            type: int
            required: false
          automask: 
            desc: Clean threshold (Cutoff parameter) for automasking in first stage. In the first stage, a full multiscale clean is run and a mask (for each scale) is created. In the second stage, CLEANing continues to a cutoff parameter of autothreshold using each scale-dependent mask for each scale. Default is 5.
            type: float
            required: false
          autothreshold:
            desc: Clean threshold (Cutoff parameter) for automasking in second stage. In the first stage, a full multiscale clean with a cutoff parameter automask is run and a mask (for each scale) is created. In the second stage, CLEANing continues to a cutoff parameter of autothreshold using each scale-dependent mask for each scale. Default is 1.
            type: float
            required: false
          cleanborder:
            desc: Set the border size in which no cleaning is performed, in percentage of the width/height of a plane. With an plane size of 1000 pixels and clean border of 1%, each border is 10 pixels. Default is 0.
            type: float
            required: false
          make_cube:
            desc: If set to true the output is a data cube, if set to false the output is one fits file per spectral channel. Default is yes.
            type: bool
            required: false
          no-update-mod:
            desc: If set to true, will not store the clean model in MODEL_DATA. Relevant for HI. 
            type: bool
            required: false
      casa_image:
        desc: Use CASA to create line data cube.
        type: map
        mapping:
          enable:
            type: bool
            required: false
          use_contsub:
            desc: Execute wsclean_image on continuum-subtracted data (otherwise use non-continuum-subtracted data) (yes/no). Default is yes.
            type: bool
            required: false
          pol:
            desc: Polarizations in output cube (I,Q,U,V,XX,YY,XY,YX,RR,LL,RL,LR and combinations). Default is I.
            type: str
            required: false
          spwid:
            desc: Spectral window to use. Default is 0.
            type: int
            required: false
          nchans:
            desc: Number of channels. If set to 'all', all channels are used. Otherwise provide the number of channels (starting with startchan, see below). Default is 'all'.
            type: text
            required: false
          startchan:
            desc: Starting channel of the cube. Used in combination with nchans. Default is 0.
            type: int
            required: false
          npix:
            desc: Image size in pixels. List of integers (width and height) or a single integer for square images. Default is worker npix.
            type: seq
            seq:
              - type: int
            required: false
          cell:
            desc: Scale of a pixel. Default unit is arcsec, but can be specificied, e.g. 'scale 20asec'. Default is worker cell.
            type: text
            required: false
          weight:
            desc: Weightmode can be natural, uniform, briggs. When using Briggs weighting, the Robustness parameter robust has to be specified in addition. Default is worker weight.
            type: str
            required: false
          robust:
            desc: Robust parameter in case of Briggs weighting. Default is worker robust.
            type: float
            required: false
          niter:
            desc: Maximum number of clean iterations to perform. Default is 1000000.
            type: int
            required: false
          threshold:
            desc: Flux level to stop cleaning, must include units, e.g. '1.0mJy'. Default is '10mJy'.
            type: str
            required: false
          port2fits:
            desc: Port output to fits files if yes. Default is yes.
            type: bool
            required: false
      sofia: 
        desc: Run SoFiA source finder to produce a source mask and a Moment-0 map
        type: map
        mapping:
          enable:
            desc: Execute segment sofia (yes/no)? Default is yes.
            type: bool
            required: false
          imager:
            desc: Description of imager used in previous steps to produce data cube. Default is 'casa'.
            type: str
            required: false
          rmsMode:
            desc: Method to determine rms ('mad' for using median absolute deviation, 'std' for using standard deviation, 'negative' for using Gaussian fit to negative voxels). Default is 'mad'
            type: str
            required: false
          threshold:
            desc: SoFiA source finding threshold. Default is 4.0.
            type: float
            required: false
          flag:
            desc: Use flag regions (yes/no)? Default is no.
            type: bool
            required: false
          flagregion:
            desc: Pixel/channel range(s) to be flagged prior to source finding. Format is [[x1, x2, y1, y2, z1, z2], ...]. Default is [].
            seq:
              - type: int
            required: false
          merge:
            desc: Use method to de-select and merge emission islands detected by any of SoFiA’s source finding algorithms. If turned on, pixels with a separation of less than mergeX pixels in x direction and less than mergeY pixels in y-direction and less than z pixels in z-direction will be merged and identified as a single object in the mask. Detections whose extent in x-direction is smaller than minSizeX, in y direction is smaller than minSizeY, and in z-direction is smaller than minSizeZ will be removed from the mask. Parameter merge determines if the merging should be applied (yes/no). Default is yes.
            type: bool
            required: false
          mergeX:
            desc: Merge-'radius' in x-direction. Default is 2
            type: int
            required: false
          mergeY: 
            desc: Merge-'radius' in y-direction. Default is 2
            type: int
            required: false
          mergeZ: 
            desc: Merge-'radius' in z-direction (velocity direction). Default is 3
            type: int
            required: false
          minSizeX:
            desc: Minimum size in x-direction. Default is 3.
            type: int
            required: false
          minSizeY:
            desc: Minimum size in y-direction. Default is 3.
            type: int
            required: false
          minSizeZ:
            desc: Minimum size in y-direction. Default is 5.      
            type: int
            required: false
      flagging_summary:
        desc: Print out flagging summary.
        type: map
        mapping:
          enable:
            desc: Execute printing flagging summary.
            type: bool
            required: false
