type: map
mapping:
  schema_version:
    type: str
    required: true

  self_cal:
    type: map
    desc: Perform Self calibration on the data
    mapping:
      enable:
        type: bool
        desc: Execute this segment
        required: true
      label:
        type: str
        desc: Label to tag the output files
        required: true
      order:
        type: int
        desc: Workers are executed in ascedning order based on this value
        required: true
      undo_subtractmodelcol:
        desc: replace the corrected column with the sum of corrected and model columns to undo continuum subtraction that may have been done by the image HI worker. Default is false
        type: bool
        required: false
      primary_beam:
        type: bool
        desc: Use primary beam
        required: true
      calibrate_with:
        type: str
        enum: ["meqtrees", "cubical"]
        desc: Tool to use for calibration
        required: true
      spwid:
        type: int
        desc: Provide spectral window id
        required: true
      ncpu:
        type: int
        desc: number of cpu's to use. Default 9
        required: false
      img_npix:
        type: int
        desc: Number of pixels in output image
        required: true
      img_padding:
        type: float
        desc: Padding
        required: true
      img_mgain:
        type: float
        desc: Image CLEANing gain
        required: true
      img_cell:
        type: float
        desc: Image pixel size (arcsec)
        required: true
      img_weight:
        type: str
        enum: ["briggs", "uniform", "natural"]
        desc: Image weighting type. !!!!! Always briggs.
        required: false
      img_robust:
        type: float
        desc: Briggs robust value. Default = 0.0
        required: false
      img_uvtaper:
        type: str
        desc: Taper for imaging. Default None
        required: false
      img_niter:
        type: int
        desc: Number of cleaning iterations
        required: true
      img_nchans:
        type: int
        desc: Number of channels in output image. Default = 1
        required: false
      img_joinchannels:
        type: bool
        desc: Join channels to create MFS image
        required: true
      img_fit_spectral_pol:
        type: int
        desc: Fit a polynomial over frequency to each clean component. default = 0
        required: false
      img_pol:
        type: str
        desc: Stokes image to create, Default 'I'
        required: false
      cal_gain_amplitude_clip_low:
        type: float
        desc: Lower gain amplitude clipping. Default 0.5
        required: false
      cal_gain_amplitude_clip_high:
        type: float
        desc: Higher gain amplitude clipping. Default 1.5
        required: false
      cal_niter:
        type: int
        desc: Number of self-calibration iterations to perform
        required: true
      cal_time_chunk:
        type: int
        desc: Size of time chunk. Default 128
        required: false
      start_at_iter:
        type: int
        desc: Start self-cal iteration loop at this start value, default = 1
        required: false

      aimfast:
        type: map
        desc: Quality assessment parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          tolerance:
            type: float
            desc: Relative change in weighted mean of several indicators from aimfast.
            required: false
          convergence_criteria:
            seq:
              - type: str
            required: false
            desc: The residual statistic to check convergence against. Every criterium listed will be combined into a weighted mean. Options ["DR","SKEW","KURT","STDDev","MEAN"]. Note that when calibrate model_mode = 'vis_only' DR is not an option.
          area_factor:
            type: float
            desc: Peak flux source area multiplying factor i.e tot_area = psf-size*af
            required: false
          normality_model:
            type: str
            enum: ["normaltest", "shapiro"]
            desc: normality test model to use. Note that normaltest is the D'Agostino
            required: false
          plot:
            type: bool
            desc: Generate html plots for comparing catalogs and residuals. Default = False
            required: false

      image:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          auto_mask:
            seq:
              - type: int 
            desc: Auto masking threshold
            required: true
          auto_threshold:
            seq:
              - type: float
            desc: Auto clean threshold
            required: true
          column:
            seq:
              - type: str
            desc: Column to image
            required: true
          mask_from_sky:
            type: bool
            desc: switch on cleaning within mask from fits file
            required: false
          fits_mask:
            seq:
              - type: str
            desc: filename of fits mask (in output/masking folder)
            required: false
          multi_scale:
            type: bool
            desc: switch on multiscale cleaning
            required: false          
          multi_scale_scales:
            seq:
              - type: int
            desc: scales of multiscale [0,10,20,etc, etc]
            required: false 
          no_update_model:
            type: bool
            desc: do not update column MODEL_DATA after wsclean
            required: false                
          minuvw_m:
            type: int
            desc: exclude short baselines [m]
            required: false
          local_rms:
            type: bool
            desc: switch on local rms measurement for cleaning
            required: false

      sofia_mask: 
        desc: Run SoFiA source finder to produce a source mask and a Moment-0 map
        type: map
        mapping:
          enable:
            desc: Execute segment sofia (yes/no)? Default is yes.
            type: bool
            required: true
          threshold:
            desc: SoFiA source finding threshold. Default is 4.0.
            type: float
            required: false
          flag:
            desc: Use flag regions (yes/no)? Default is no.
            type: bool
            required: false
          flagregion:
            desc: Pixel/channel range(s) to be flagged prior to source finding. Format is [[x1, x2, y1, y2, z1, z2], ...]. Default is [].
            seq:
              - type: int
            required: false
          inputmask:
            type: str
            desc: input mask over which add Sofia's
            required: false
          kernels:
            seq:
              - type: int
            desc: Kernels for mask
            required: false
          fornax_special:
            desc: Activates masking of Fornax A using Sofia
            type: bool
            required: False
          fornax_thresh:
            desc: SoFiA source finding threshold. Default is 4.0.
            seq:
              - type: float
            required: false
          use_sofia:
            type: bool
            desc: use sofia for mask of Fornax A instead of Fomalont mask  
            required: false
          scale_noise_window:
            type: float
            desc: window size where to measure local rms in pixels
            required: false
          positivity:
            type: bool
            desc: merges only positive pixesl of sources in mask  
            required: false

      extract_sources:
        type: map
        desc: Source finding parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          sourcefinder:
            type: str
            desc: choose your favorite sourcefinder pybdsm, (pybdsf), sofia
            required: true
          local_rms:
            type: bool
            desc: Use local area for rms calculation or not. Default = True
            required: false
          spi:
            type: bool
            desc: Extract source spectral index. Default = False
            required: false            # if not specified no spi will be determined
          thresh_pix:
            seq:
              - type: int
            desc: Source finder pixel threshold
            required: false
          thresh_isl:
            seq:
              - type: int
            desc: Source finder island threshold
            required: false


      calibrate:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            seq:
              - type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
          output_data:
            seq:
              - type: str
            desc: Data to output after calibration
            required: true
          gain_matrix_type:
            seq:
              - type: str
            desc: Gain matrix type
            required: true
          model_mode:
            type: str
            desc: pybdsm_vis, pybdsm_only,  vis_only are the possible options
            required: True
          shared_memory:
            type: str
            desc: Set the amount of shared memory for cubical. Default '100Gb'
            required: False
          two_step:
            type: bool
            desc: Trigger a two step calibration process where the phase only calibration is applied before continuing with amplitude + phase cal. When cubical is used this happens simultaneous and gain parameters can be used with DDsols parameters. Set DDsol_time to -1 one to avoid amplitude calibration in an itereation. The parameter DDjones should be set to false. Default =False
            required: false
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation. Default = False
            required: false
          Gsols_time:
            seq:
              - type: float
            desc: Time intervals for individual calibration steps for gain calibrations. 0 indicates average all.
            required: true
          Gsols_channel:
            seq:
              - type: float
            desc: Channel intervals for individual calibration steps for gain calibrations. 0 indicates average all.
            required: true
          Bjones: 
           type: bool
           desc: Enable Bjones. default = False
           required: false
          Bsols_time:
            seq:
              - type: float
            desc: Time intervals for individual calibration steps for B jones calibrations. 0 indicates average all. Default 0
            required: false
          Bsols_channel:
            seq:
              - type: float
            desc: Channel intervals for individual calibration steps for B jones calibrations. 0 indicates average all. Default 0
            required: false
          DDjones:
            type: bool
            desc: Enable direction dependent calibration, currently experimental. Default False
            required: false
          DDsols_time:
            desc:  Time intervals for individual calibration steps for DD jones calibrations. 0 indicates average all. Default 0
            seq:
              - type: float
            required: false
          DDsols_channel:
            desc: Time intervals for individual calibration steps for DD jones calibrations. 0 indicates average all. Default 0
            seq:
              - type: float
            required: false
      restore_model:
        type: map
        desc: Restore modelled to final calibrated residual image
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: true
          clean_model: 
            type: str
            desc: Clean model number to use [or combination e.g. '1+2' to use first and second models]
            required: true

      flagging_summary:
        type: map
        desc: Output the flagging summary
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
      gain_interpolation:
        type: map
        desc: Interpolate gains over the high frequency resolution data
        mapping:
          enable: 
            type: bool
            desc: Execute this segment
            required: true
          hires_label:
            type: str
            desc: label for high resolution data products in selfcal
            required: false
      highfreqres_contim:
        type: map
        desc: Make final continuum image and model at higher freq res, ideally using a clean mask based on the last round of continuum imging
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: true
          chans:
            type: int
            desc: output continuum channels
            required: true
          deconv_chans:
            type: int
            desc: nr of channels used for deconvolution grouping together output continuum channels
            required: true
          fit_spectral_pol:
            type: int
            desc: How many terms for the spectral polynomial fit of each clean component
            required: true
          fits_mask:
            desc: filename of fits mask (including folder if not input), default None
            type: str
            required: false
          auto_mask:
            type: float
            desc: Auto masking threshold, default None
            required: false
          auto_threshold:
            type: float
            desc: Auto clean threshold, default 10
            required: false
          column:
            type: str
            desc: Column to image
            required: false
          multi_scale:
            type: bool
            desc: switch on multiscale cleaning
            required: false
          multi_scale_scales:
            seq:
              - type: int
            desc: scales of multiscale [0,10,20,etc, etc]
            required: false
          local_rms:
            type: bool
            desc: switch on local rms measurement for cleaning
            required: false

