type: map
mapping:
  schema_version:
    type: str
    required: true

  self_cal:
    type: map
    desc: Perform Self calibration on the data
    mapping:
      enable:
        type: bool
        desc: Execute this segment
        required: true
        example: 'False'
      label:
        type: str
        desc: Label of the .MS files to process
        required: false
        example: 'corr'
      undo_subtractmodelcol:
        desc: replace the corrected column with the sum of corrected and model columns to undo continuum subtraction that may have been done by the image HI worker.
        type: bool
        required: false
        example: 'False'
      primary_beam:
        type: bool
        desc: Use primary beam
        required: false
        example: 'False'
      calibrate_with:
        type: str
        enum: ["meqtrees", "cubical"]
        desc: Tool to use for calibration
        required: false
        example: 'cubical'
      spwid:
        type: int
        desc: Provide spectral window id
        required: false
        example: '0'
      ncpu:
        type: int
        desc: number of cpu's to use
        required: false
        example: '5'
      minuvw_m:
        type: int
        desc: Exclude baselines shorter than this value (given in metres) from the imaging and selfcalibration loop.
        required: false
        example: '0'
      img_npix:
        type: int
        desc: Number of pixels in output image
        required: false
        example: '1800'
      img_padding:
        type: float
        desc: Padding in WSclean
        required: false
        example: '1.3'
      img_mgain:
        type: float
        desc: Image CLEANing gain
        required: false
        example: '0.99'
      img_cell:
        type: float
        desc: Image pixel size (arcsec)
        required: false
        example: '2.'
      img_weight:
        type: str
        enum: ["briggs", "uniform", "natural"]
        desc: Image weighting type. If Briggs, set the img robust parameter
        required: false
        example: 'briggs'
      img_robust:
        type: float
        desc: Briggs robust value
        required: false
        example: '0.'
      img_uvtaper:
        type: str
        desc: Taper for imaging (arcsec)
        required: false
        example: '0'
      img_niter:
        type: int
        desc: Number of cleaning iterations
        required: false
        example: '1000000'
      img_nmiter: 
        type: int
        desc: Number of major cycles
        required: False
        example: '0'   
      img_cleanborder:
        type: float
        desc: Clean border
        required: false
        example: '1.3' 
      img_nchans:
        type: int
        desc: Number of channesls in output image
        required: false
        example: '3'
      img_joinchannels:
        type: bool
        desc: Join channels to create MFS image
        required: false
        example: 'True'
      img_fit_spectral_pol:
        type: int
        desc: Number of spectral polynomial terms to fit to each clean component. This is equal to the order of the polynomial plus 1.
        required: false
        example: '2'
      img_pol:
        type: str
        desc: Stokes image to create
        required: false
        example: 'I'
      cal_gain_amplitude_clip_low:
        type: float
        desc: Lower gain amplitude clipping
        required: false
        example: '0.5'
      cal_gain_amplitude_clip_high:
        type: float
        desc: Higher gain amplitude clipping
        required: false
        example: '2.'
      cal_niter:
        type: int
        desc: Number of self-calibration iterations to perform
        required: false
        example: '2'
      start_at_iter:
        type: int
        desc: Start self-cal iteration loop at this start value, 1-based.
        required: false
        example: '1'
      cal_time_chunk:
        desc: Chunk data up by this number of timeslots. This limits the amount of data processed at once. Smaller chunks allow for a smaller RAM footprint and greater parallelism but sets an upper limit on the time solution intervals that may be employed. 0 means use full time axis but does not cross scan boundaries.
        type: int
        required: false
        example: '1'
      cal_freq_chunk:
        desc: Chunk data up by this number of channels. This limits the amount of data processed at once. Smaller chunks allow for a smaller RAM footprint and greater parallelism but sets an upper limit on the frequency solution intervals that may be employed. 0 means use full frequency axis but does not cross SPW boundaries.
        type: int
        required: false
        example: '0'

      aimfast:
        type: map
        desc: Quality assessment parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          tolerance:
            type: float
            desc: Relative change in weighted mean of several indicators from aimfast.
            required: false
            example: '0.02'
          convergence_criteria:
            seq:
              - type: str
            required: false
            desc: The residual statistic to check convergence against. Every criterium listed will be combined into a weighted mean. Options ["DR","SKEW","KURT","STDDev","MEAN"]. Note that when calibrate model_mode = 'vis_only' DR is not an option.
            example: 'DR'
          area_factor:
            type: int
            desc: Peak flux source area multiplying factor i.e tot_area = psf-size*af
            required: false
            example: '6'
          normality_model:
            type: str
            enum: ["normaltest", "shapiro"]
            desc: normality test model to use. Note that normaltest is the D'Agostino
            required: false
            example: 'normaltest'
          plot:
            type: bool
            desc: Generate html plots for comparing catalogs and residuals
            required: false
            example: 'True'

      image:
        type: map
        desc: Imaging parameter
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'True'
          auto_mask:
            seq:
              - type: float 
            desc: Auto masking threshold
            required: false
            example: '30, 10, 7'
          auto_threshold:
            seq:
              - type: float
            desc: Auto clean threshold
            required: false
            example: '0.5'
          column:
            seq:
              - type: str
            desc: Column to image
            required: false
            example: 'DATA, CORRECTED_DATA'
          mask_from_sky:
            type: bool
            desc: switch on cleaning within mask from fits file
            required: false
            example: 'False'
          fits_mask:
            seq:
              - type: str
            desc: filename of fits mask (in output/masking folder)
            required: false
            example: 'catalog_mask.fits'
          multi_scale:
            type: bool
            desc: switch on multiscale cleaning
            required: false
            example: 'False'
          multi_scale_scales:
            seq:
              - type: int
            desc: scales of multiscale [0,10,20,etc, etc] in pixels
            required: false
            example: '10, 20, 30'
          local_rms:
            type: bool
            desc: switch on local rms measurement for cleaning
            required: false
            example: 'False'

      sofia_mask: 
        desc: Run SoFiA source finder to produce a source mask and a Moment-0 map
        type: map
        mapping:
          enable:
            desc: Execute segment sofia (yes/no)?
            type: bool
            required: false
            example: "False"
          threshold:
            desc: SoFiA source finding threshold.
            type: float
            required: false
            example: '4.0'
          flag:
            desc: Use flag regions (yes/no)?
            type: bool
            required: false
            example: 'False'
          flagregion:
            desc: Pixel/channel range(s) to be flagged prior to source finding. Format is [[x1, x2, y1, y2, z1, z2], ...].
            seq:
              - type: str
            required: false
            example: ''
          inputmask:
            type: str
            desc: input mask over which add Sofia's
            required: false
            example: ''
          fornax_special:
            desc: Activates masking of Fornax A using Sofia
            type: bool
            required: false
            example: 'False'
          fornax_thresh:
            desc: SoFiA source finding threshold. Default is 4.0.
            seq:
              - type: float
            required: false
            example: '4.0'
          use_sofia:
            type: bool
            desc: use sofia for mask of Fornax A instead of Fomalont mask  
            required: false
            example: 'False'
          scale_noise_window:
            type: int
            desc: window size where to measure local rms in pixels
            required: false
            example: '31'
          positivity:
            type: bool
            desc: merges only positive pixesl of sources in mask  
            required: false
            example: 'False'

      extract_sources:
        type: map
        desc: Source finding parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          sourcefinder:
            type: str
            desc: choose your favorite sourcefinder pybdsm, (pybdsf), sofia
            required: false
            example: 'pybdsm'
          local_rms:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          spi:
            type: bool
            desc: Extract source spectral index
            required: false
            example: 'False'           # if not specified no spi will be determined
          thresh_pix:
            seq:
              - type: int
            desc: Source finder pixel threshold
            required: false
            example: '5'
          thresh_isl:
            seq:
              - type: int
            desc: Source finder island threshold
            required: false
            example: '3'         

      calibrate:
        type: map
        desc: Calibration parameters
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'True'
          model:
            seq:
              - type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
            example: '1,2'
          output_data:
            seq:
              - type: str
            desc: Data to output after calibration
            required: false
            example: 'CORR_DATA'
          gain_matrix_type:
            seq:
              - type: str
            desc: Gain matrix type
            required: false
            example: 'GainDiagPhase'
          model_mode:
            type: str
            desc: pybdsm_vis, pybdsm_only,  vis_only are the possible options
            required: false
            example: 'vis_only'
          shared_memory:
            type: str
            desc: Set the amount of shared memory for cubical. Default '100Gb'
            required: false
            example: '100Gb'
          two_step:
            type: bool
            desc: Trigger a two step calibration process where the phase only calibration is applied before continuing with amplitude + phase cal. When cubical is used this happens simultaneous and gain parameters can be used with DDsols parameters. Set DDsol_time to -1 one to avoid amplitude calibration in an itereation. The parameter DDjones should be set to false.
            required: false
            example: 'False'
          add_vis_model:
            type: bool
            desc: Add/Use clean components from latest imaging step to/as sky model for calibation
            required: false
            example: 'True'
          Gsols_time:
            seq:
              - type: float
            desc: G-Jones time solution interval. The parameter cal_time_chunk above should a multiple of Gsols_time. 0 means a single solution for the full time chunk.
            required: false
            example: '1'
          Gsols_channel:
            seq:
              - type: float
            desc: G-Jones frequency solution interval. The parameter cal_frq_chunk above should a multiple of Gsols_channel. 0 means a single solution for the full frequency chunk.
            required: false
            example: '0'
          Bjones: 
           type: bool
           desc: Enable Bjones
           required: false
           example: 'False'
          Bsols_time:
            seq:
              - type: int
            desc: Gsols for individual calibration steps, if not given will default to cal_Gsols
            required: false
            example: '0'
          Bsols_channel:
            seq:
              - type: float
            desc: Gsols for individual calibration steps, if not given will default to cal_Gsols
            required: false
            example: '2'
          DDjones:
            type: bool
            desc: Enable direction dependent calibration, currently experimental.
            required: false
            example: 'False'
          DDsols_time:
            desc: Calibration solution intervals
            seq:
              - type: float
            required: false
            example: '0'
          DDsols_channel:
            desc: Calibration solution intervals
            seq:
              - type: float
            required: false
            example: '0'
          weight_column:
            desc: Column with weights
            type: str
            required: false
            example: 'WEIGHT'
          madmax_flagging:
            desc: Flags based on maximum of mad
            type: bool
            required: false
            example: 'True'
          madmax_flag_thresh:
            desc: Threshold for madmax flagging
            seq:
              - type: int
            required: false
            example: '0, 10'
          sol_term_iters:
            desc: Number of iterations per Jones term. If set to 'auto', uses hardcoded iteration numbers depending on the jones chain.
            type: str
            required: false
            example: 'auto'
          dist_max_chunks:
            desc: Maximum number of time/freq data-chunks to load into memory simultaneously. If 0, then as many as possible will be loaded.
            type: int
            required: false
            example: '4'
          
          ragavi_plot:
            type: map
            desc: Plotting dignostics plots for delay correction calibration.
            mapping:
              enable:
                type: bool
                desc: Enables plotting dignostics
                required: false
                example: 'False'
              gaintype:
                seq:
                - type: str
                desc: "List of gain solution types"
                required: false
                example: 'G'
              field:
                seq:
                - type: int
                desc: "Fields to plot. Specify by field id, index."
                required: false
                example: '0'

      restore_model:
        type: map
        desc: Restore modelled to final calibrated residual image
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          model:
            type: str
            desc: Model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
            example: '1+2'
          clean_model: 
            type: str
            desc: Clean model number to use [or combination e.g. '1+2' to use first and second models]
            required: false
            example: '3'

      flagging_summary:
        type: map
        desc: Output the flagging summary
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'

      transfer_apply_gains:
        type: map
        desc: Interpolate gains over the high frequency resolution data
        mapping:
          enable: 
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          transfer_to_label:
            type: str
            desc: label of cross-calibrated .ms file to which to transfer and apply the selfcal gains
            required: false
            example: 'corr'
          time_chunk:
            type: int
            desc: Time chunk in units of timeslots for transferring gains with Cubical.
            required: false
            example: '128'
          freq_chunk:
            type: int
            desc: Frequency chunk in units of channels for transferring gains with Cubical. '0' means the whole spw.
            required: false
            example: '0'
          interpolate:
            type: map
            desc: To interpolate the gains or not to interpolate the gains. That is indeed the question.
            mapping:
              enable:
                 type: bool
                 desc: Enable gain interpolation. 
                 required: false
                 example: 'True'
              time_int:   
                 type: int
                 desc: Solution interval in time (units of timeslots/intergration time) to transfer gains.
                 required: false
                 example: '16'
              freq_int:
                 type: int
                 desc: Solution interval in frequency (units of channels) to transfer gains.
                 required: false
                 example: '0'     
          

      transfer_model:
        type: map
        desc: Transfer model from last WSclean imaging run to the MODEL_DATA column of another .MS
        mapping:
          enable:
            type: bool
            desc: Execute this segment (default False)
            required: false
            example: 'True'
          transfer_to_label:
            type: str
            desc: label of .ms file to which to transfer the model
            required: false
            example: 'corr'
          model:
            type: str
            desc: Name of the sky model file (currently the only supported format is that of WSclean component lists). When 'auto', the pipeline builds the file name from the input parameters of the selfcal loop. The file is assumed to be in the 'output' directory.
            required: false
            example: 'auto'
          spectra:
            type: bool
            desc: Model sources as non-flat spectra. The spectral coefficients and reference frequency must be present in the sky model.
            required: false
            example: 'True'
          row_chunks:
            type: int
            desc: Number of rows of input .MS that are processed in a single chunk.
            required: false
            example: '0'
          model_chunks:
            type: int
            desc: Number of sky model components that are processed in a single chunk.
            required: false
            example: '0'
          exp-sign-convention:
            type: str
            desc: Sign convention to use for the complex exponential. 'casa' specifies the e^(2.pi.I) convention while 'thompson' specifies the e^(-2.pi.I) convention in the white book and Fourier analysis literature. Defaults to 'casa'.
            required: false
            example: 'casa'
          within:
            type: str
            desc: Give JS9 region file. Only sources within those regions will be included.
            required: false
            example: ''
          points_only:
            type: bool
            desc: Select only point-only sources. Default is False.
            required: false
            example: 'False'
          num_sources:
            type: int
            desc: Select only N brightest sources. Default is 0
            required: false
            example: "0"
          num_workers:
            type: int
            desc: Explicitly set the number of worker threads. Default is 0, meaning it uses all threads.
            required: false
            example: '0'
          memory_fraction:
            type: float
            desc: Fraction of system RAM that can be used. Used when setting automatically the chunk size. 
            required: false
            example: '0.5'

      highfreqres_contim:
        type: map
        desc: Make final continuum image and model at higher frequency resolution, ideally using a clean mask based on the last round of continuum imaging
        mapping:
          enable:
            type: bool
            desc: Execute this segment
            required: false
            example: 'False'
          chans:
            type: int
            desc: output continuum channels
            required: false
            example: '10'
          deconv_chans:
            type: int
            desc: nr of channels used for deconvolution grouping together output continuum channels
            required: false
            example: '2'
          fit_spectral_pol:
            type: int
            desc: How many terms for the spectral polynomial fit of each clean component
            required: false
            example: '2'
          fits_mask:
            desc: filename of fits mask (including folder if not input), default None
            type: str
            required: false
            example: ''
          auto_mask:
            type: float
            desc: Auto masking threshold, default None
            required: false
            example: '10'
          auto_threshold:
            type: float
            desc: Auto clean threshold, default 10
            required: false
            example: '0.5'
          column:
            type: str
            desc: Column to image
            required: false
            example: 'CORR_DATA'
          multi_scale:
            type: bool
            desc: switch on multiscale cleaning
            required: false
            example: 'False'
          multi_scale_scales:
            seq:
              - type: int
            desc: scales of multiscale [0,10,20,etc, etc] in pixel
            required: false
            example: '10, 20, 30, 40'
          local_rms:
            type: bool
            desc: switch on local rms measurement for cleaning
            required: false
            example: 'False'

