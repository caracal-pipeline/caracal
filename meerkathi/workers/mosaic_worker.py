import os, glob
import sys

NAME = "Mosaic images output by selfcal or imageHI"

def worker(pipeline, recipe, config):

    wname = pipeline.CURRENT_WORKER

    # Prioritise parameters specified in the config file   ### How do we get them from the schema instead?
    specified_mosaictype = config['mosaic_type']# i.e. 'continuum' or 'spectral'
    specified_cutoff = config['cutoff'] # e.g. 0.25
    use_MFS_images = config['use_MFS_images']
    specified_prefix = config['name']
    #specified_images = config['target_images'] ### Test at a later point

    # To ease finding the appropriate files, and to keep this worker self-contained
    if use_MFS_images = 'true':
        mfsprefix = '-MFS'
    else:
        mfsprefix = ''

    def identify_last_selfcal_image(directory_to_check, prefix, field, mfsprefix):
        matching_files = glob.glob(directory_to_check+'{0:s}_{1:s}_*{2:s}-image.fits'.format(prefix, field, mfsprefix) # '*' to pick up the number
        max_num = 0  # Initialisation
        for filename in matching_files:
            split_filename = filename.split('_')
            number = split_filename.split('-')[0]
            num = int(number)
            if num > max_num:
                max_num = num
        filename_of_last_selfcal_image = '{0:s}_{1:s}_{2:s}{3:s}-image.fits'.format(prefix, field, str(max_num),  mfsprefix)
        return filename_of_last_selfcal_image

    # In case there are different pipeline prefixes
    for i in range(pipeline.nobs):

        prefix = pipeline.prefixes[i]
        
        # Empty list to add filenames to
        specified_images = []

        # Expecting the same prefix and mfsprefix to apply for all fields to be mosaicked together
        for field in pipeline.fields:  ### Is pipeline.fields always defined?

            # Use the mosaictype to infer the filenames of the images
            if specified_mosaictype = 'continuum':  # Add name of 2D image output by selfcal
                image_name = identify_last_selfcal_image(pipeline.output, prefix, field, mfsprefix)
                specified_images = specified_images.append(image_name)
                pb_worker = 'observation_config_worker'
            else:  # i.e. mosaictype = 'spectral', so add name of cube output by imageHI
                image_name = '{0:s}_{1:s}_HI{2:s}-image.fits'.format(prefix, field, mfsprefix)
                if mfsprefix = '':
                    image_name = image_name.replace('-image','.image') # Following the naming in image_HI_worker   
                specified_images = specified_images.append(image_name)
                pb_worker = 'image_HI_worker'

        # List of images in place now, so ready to add montage_mosaic to the meerkathi recipe
        if pipeline.enable_task(config, 'domontage'):
            recipe.add('cab/montage_mosaic', 'montage_mosaic',
                {
                    "mosaic-type"    : specified_mosaictype,
                    "domontage"      : True,
                    "cutoff"         : specified_cutoff,
                    "name"           : prefix,
                    "target-images"  : specified_images,
                },
                input=pipeline.input,
                output=pipeline.output,
                label='montage_mosaic:: Re-gridding {0:s} images before mosaicking them. For this mode, the mosaic_worker expects that *pb.fits files were generated by the {1:s}.'.format(specified_mosaictype, pb_worker))
        else:
            recipe.add('cab/montage_mosaic', 'montage_mosaic',
                {
                    "mosaic-type"    : specified_mosaictype,
                    "domontage"      : False,
                    "cutoff"         : specified_cutoff,
                    "name"           : prefix,
                    "target-images"  : specified_images,
                },
                input=pipeline.input,
                output=pipeline.output,
                label='montage_mosaic:: Re-gridding already done, so straight to mosaicking {0:s} images. For this mode, the mosaic_worker expects that *pb.fits files were generated by the {1:s}.'.format(specified_mosaictype, pb_worker))
     
    ### Leaving the following as a reminder of syntax    
    #if pipeline.enable_task(config, 'add_spectral_weights'):
        #step = 'estimate_weights_{:d}'.format(i)
        #recipe.add('cab/msutils', step,
        #    {
        #      "msname"          : msname,
        #      "command"         : 'estimate_weights',
        #      "stats_data"      : config['add_spectral_weights'].get('stats_data', 'use_package_meerkat_spec'),
        #      "weight_columns"  : config['add_spectral_weights'].get('weight_columns', ['WEIGHT', 'WEIGHT_SPECTRUM']),
        #      "noise_columns"   : config['add_spectral_weights'].get('noise_columns', ['SIGMA', 'SIGMA_SPECTRUM']),
        #      "write_to_ms"     : config['add_spectral_weights'].get('write_to_ms', True),
        #      "plot_stats"      : prefix + '-noise_weights.png',
        #    },
        #    input=pipeline.input,
        #    output=pipeline.output,
        #    label='{0:s}:: Adding Spectral weights using MeerKAT noise specs ms={1:s}'.format(step, msname))


