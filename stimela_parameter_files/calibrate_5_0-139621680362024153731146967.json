{"binary": "/usr/bin/meqtree-pipeliner.py", "task": "calibrator", "description": "Uses MeqTrees to calibrate a measurement set, given a sky model (Gaussians and point sources, and/or visibility data in MODEL_DATA column)", "parameters": [{"info": "Name of MS to be calibrated", "check_io": true, "name": "msname", "dtype": "file", "required": true, "value": "/home/peter/msdir/GMRT_Original-corr.ms"}, {"info": "Sky model to use for the calibration", "check_io": true, "name": "skymodel", "dtype": "file", "required": false, "value": "/home/peter/output/meerkathi-pipeline_5-pybdsm.lsm.html"}, {"info": "Source subset to use for the calibration", "check_io": true, "name": "subset", "dtype": "str", "required": false, "value": "all"}, {"info": "Add visibility model data to the calibration model. This model should be saved in the MODEL_DATA column", "check_io": true, "name": "add-vis-model", "dtype": "bool", "required": false, "value": false}, {"info": "Visbility model column", "check_io": true, "name": "model-column", "dtype": "str", "required": false, "value": "MODEL_DATA"}, {"info": "Label for gain and diagnostic plots from the caibration. May not be needed if 'prefix' is provided.", "check_io": true, "name": "label", "dtype": "str", "required": false, "value": "cal5"}, {"info": "Prefix for gain and diagnostic plots. If not specified will use basename of MS.", "check_io": true, "name": "prefix", "dtype": "str", "required": false, "value": "GMRT_Original-5_meqtrees"}, {"info": "Make gain plots", "check_io": true, "name": "make-plots", "dtype": "bool", "required": false, "value": true}, {"info": "Column that has the data to be calibrated", "check_io": true, "name": "column", "dtype": "str", "required": false, "value": "DATA"}, {"info": "Column that the calibrated data should be dumped into", "check_io": true, "name": "output-column", "dtype": "str", "required": false, "value": "CORRECTED_DATA"}, {"info": "Data to be outputed after calibration", "check_io": true, "name": "output-data", "dtype": "str", "required": false, "value": "CORR_DATA"}, {"info": "Number of CPUs to use for  multithreading", "check_io": true, "name": "threads", "dtype": "int", "required": false, "value": 9}, {"info": "TDL configuration file. If not specified, will use a default template", "check_io": true, "name": "tdlconf", "dtype": "file", "required": false, "value": null}, {"info": "save final configuration (after all command-line arguments have been applied)", "check_io": true, "name": "save-config", "dtype": "file", "required": false, "value": null}, {"info": "Section to execute in TDL config file. Only needed if using custom TDL config", "check_io": true, "name": "section", "dtype": "str", "required": false, "value": null}, {"info": "Correlations to use", "check_io": true, "name": "correlations", "dtype": "str", "required": false, "value": "2x2"}, {"info": "Field ID", "check_io": true, "name": "field-id", "dtype": "int", "required": false, "value": 0}, {"info": "SPW ID", "check_io": true, "name": "spw-id", "dtype": "int", "required": false, "value": null}, {"info": "Write flags to MS", "check_io": true, "name": "write-flags-to-ms", "dtype": "bool", "required": false, "value": null}, {"info": "name of flagset to write new flags to", "check_io": true, "name": "write-flagset", "dtype": "str", "required": false, "value": "stefcal"}, {"info": "Add or replace flagset if it already exists.", "check_io": true, "name": "write-flagset-policy", "dtype": "str", "required": false, "value": "replace"}, {"info": "Read flagsets", "check_io": true, "name": "read-flagsets", "dtype": "str", "required": false, "value": "-stefcal"}, {"info": "Read legacy flags", "check_io": true, "name": "read-legacy-flags", "dtype": "bool", "required": false, "value": true}, {"info": "Use existing flags from MS", "check_io": true, "name": "read-flags-from-ms", "dtype": "bool", "required": false, "value": true}, {"info": "Fill legacy flags", "check_io": true, "name": "fill-legacy-flags", "dtype": "bool", "required": false, "value": true}, {"info": "Add a primary beam model", "check_io": true, "name": "Ejones", "dtype": "bool", "required": false, "value": false}, {"info": "Beam files pattern", "check_io": false, "name": "beam-files-pattern", "dtype": "file", "required": false, "value": null}, {"info": "Type of input beam files", "check_io": true, "name": "beam-type", "dtype": "str", "required": false, "value": "fits"}, {"info": "Beam l axis", "check_io": true, "name": "beam-l-axis", "dtype": "str", "required": false, "value": "X"}, {"info": "Beam m axis", "check_io": true, "name": "beam-m-axis", "dtype": "str", "required": false, "value": "Y"}, {"info": "Enable parallactic angle rotation. Enable if telescope mount is ALT-AZ", "check_io": true, "name": "parallactic-angle-rotation", "dtype": "bool", "required": false, "value": false}, {"info": "Enable direction dependent calibration", "check_io": true, "name": "Gjones", "dtype": "bool", "required": false, "value": true}, {"info": "Jones matrix type", "check_io": true, "name": "Gjones-matrix-type", "dtype": "str", "required": false, "value": "GainDiag"}, {"info": "Solution intervals in time and frequency in time/frequency bins. Should be given as a list of two integers", "check_io": true, "name": "Gjones-solution-intervals", "dtype": "list:int", "required": false, "value": [15, 0]}, {"info": "Solution intervals in time and frequency in time/frequency bins. Should be given as a list of two integers", "check_io": true, "name": "Gjones-smoothing-intervals", "dtype": "list:int", "required": false, "value": null}, {"info": "Gjones amplitude clipping", "check_io": true, "name": "Gjones-ampl-clipping", "dtype": "bool", "required": false, "value": true}, {"info": "Gjones chi square clipping", "check_io": true, "name": "Gjones-chisq-clipping", "dtype": "bool", "required": false, "value": false}, {"info": "Gjones threshold level", "check_io": true, "name": "Gjones-thresh-sigma", "dtype": "float", "required": false, "value": 10}, {"info": "Gjones flagging amplitude", "check_io": true, "name": "Gjones-ampl-clipping-low", "dtype": "float", "required": false, "value": 0.5}, {"info": "Gjones flagging amplitude", "check_io": true, "name": "Gjones-ampl-clipping-high", "dtype": "float", "required": false, "value": 2.5}, {"info": "Apply existing gains", "check_io": true, "name": "Gjones-apply-only", "dtype": "bool", "required": false, "value": false}, {"info": "G Jones gain table file name", "check_io": true, "name": "Gjones-gain-table", "dtype": "file", "required": false, "value": null}, {"info": "Enable Bjones direction dependent calibration ", "check_io": true, "name": "Bjones", "dtype": "bool", "required": false, "value": false}, {"info": "Solution intervals in time and frequency in time/frequency bins for Bjones. Should be given as a list of two integers", "check_io": true, "name": "Bjones-solution-intervals", "dtype": "list:int", "required": false, "value": null}, {"info": "Solution intervals in time and frequency in time/frequency bins for Bjones. Should be given as a list of two integers", "check_io": true, "name": "Bjones-smoothing-intervals", "dtype": "list:int", "required": false, "value": null}, {"info": "Bjones amplitude clipping", "check_io": true, "name": "Bjones-ampl-clipping", "dtype": "bool", "required": false, "value": false}, {"info": "Bjones chi square clipping", "check_io": true, "name": "Bjones-chisq-clipping", "dtype": "bool", "required": false, "value": false}, {"info": "Bjones threshold level", "check_io": true, "name": "Bjones-thresh-sigma", "dtype": "float", "required": false, "value": 10}, {"info": "Bjones flagging amplitude", "check_io": true, "name": "Bjones-ampl-clipping-low", "dtype": "float", "required": false, "value": 0.5}, {"info": "Bjones flagging amplitude", "check_io": true, "name": "Bjones-ampl-clipping-high", "dtype": "float", "required": false, "value": 2.5}, {"info": "Apply existing gains", "check_io": true, "name": "Bjones-apply-only", "dtype": "bool", "required": false, "value": false}, {"info": "B Jones gain table file name", "check_io": true, "name": "Bjones-gain-table", "dtype": "file", "required": false, "value": null}, {"info": "Enable direction dependent calibration", "check_io": true, "name": "DDjones", "dtype": "bool", "required": false, "value": false}, {"info": "Jones matrix type", "check_io": true, "name": "DDjones-matrix-type", "dtype": "str", "required": false, "value": "Gain2x2"}, {"info": "Number of iterations", "check_io": true, "name": "DDjones-niter", "dtype": "int", "required": false, "value": 50}, {"info": "Tag for sources that will recieve DD calibration", "check_io": true, "name": "DDjones-tag", "dtype": "str", "required": false, "value": "dE"}, {"info": "Solution intervals in time and frequency in time/frequency bins. Should be given as a list of two integers", "check_io": true, "name": "DDjones-solution-intervals", "dtype": "list:int", "required": false, "value": null}, {"info": "Smoothing intervals in time and frequency in time/frequency bins. Should be given as a list of two integers", "check_io": true, "name": "DDjones-smoothing-intervals", "dtype": "list:int", "required": false, "value": null}, {"info": "DDjones amplitude clipping", "check_io": true, "name": "DDjones-ampl-clipping", "dtype": "bool", "required": false, "value": false}, {"info": "DDjones chi square clipping", "check_io": true, "name": "DDjones-chisq-clipping", "dtype": "bool", "required": false, "value": false}, {"info": "DDjones threshold level", "check_io": true, "name": "DDjones-thresh-sigma", "dtype": "float", "required": false, "value": 10}, {"info": "DDjones flagging amplitude", "check_io": true, "name": "DDjones-ampl-clipping-low", "dtype": "float", "required": false, "value": 0.2}, {"info": "DDjones flagging amplitude", "check_io": true, "name": "DDjones-ampl-clipping-high", "dtype": "float", "required": false, "value": 1.8}, {"info": "Apply existing gains", "check_io": true, "name": "DDjones-apply-only", "dtype": "bool", "required": false, "value": false}, {"info": "DD Jones gain table file name", "check_io": true, "name": "DDjones-gain-table", "dtype": "file", "required": false, "value": null}, {"info": "Enable interferometer based gain solutions", "check_io": true, "name": "IFRjones", "dtype": "bool", "required": false, "value": false}, {"info": "Apply existing gains", "check_io": true, "name": "IFRjones-apply-only", "dtype": "bool", "required": false, "value": false}, {"info": "IFR Jones gain table file name", "check_io": true, "name": "IFRjones-gain-table", "dtype": "file", "required": false, "value": null}, {"info": "Size of tile (time bins) to process. Can be used to reduce memory footprint", "check_io": true, "name": "tile-size", "dtype": "int", "required": false, "value": 128}, {"info": "TaQL selction string", "check_io": true, "name": "data-selection", "dtype": "str", "required": false, "value": null}], "prefix": " ", "tag": "1.0.0", "msdir": "/home/peter/Test2/", "base": "stimela/meqtrees"}